"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc";
exports.ids = ["vendor-chunks/@trpc"];
exports.modules = {

/***/ "(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === 'TRPCClientError';\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj.error) && typeof obj.error.code === 'number' && typeof obj.error.message === 'string';\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError('Unknown error', {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = 'TRPCClientError';\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvVFJQQ0NsaWVudEVycm9yLTBkZTRkMjMxLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDs7QUFFL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdFQUFRLFNBQVMsZ0VBQVE7QUFDcEM7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0wZGU0ZDIzMS5tanM/N2E2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGlzT2JqZWN0IH0gZnJvbSAnLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcblxuZnVuY3Rpb24gaXNUUlBDQ2xpZW50RXJyb3IoY2F1c2UpIHtcbiAgICByZXR1cm4gY2F1c2UgaW5zdGFuY2VvZiBUUlBDQ2xpZW50RXJyb3IgfHwgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBEZWxldGUgaW4gbmV4dCBtYWpvclxuICAgICAqLyBjYXVzZSBpbnN0YW5jZW9mIEVycm9yICYmIGNhdXNlLm5hbWUgPT09ICdUUlBDQ2xpZW50RXJyb3InO1xufVxuZnVuY3Rpb24gaXNUUlBDRXJyb3JSZXNwb25zZShvYmopIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBpc09iamVjdChvYmouZXJyb3IpICYmIHR5cGVvZiBvYmouZXJyb3IuY29kZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iai5lcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJztcbn1cbmNsYXNzIFRSUENDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0aWMgZnJvbShfY2F1c2UsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCBjYXVzZSA9IF9jYXVzZTtcbiAgICAgICAgaWYgKGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSkge1xuICAgICAgICAgICAgaWYgKG9wdHMubWV0YSkge1xuICAgICAgICAgICAgICAgIC8vIERlY29yYXRlIHdpdGggbWV0YSBlcnJvciBkYXRhXG4gICAgICAgICAgICAgICAgY2F1c2UubWV0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2F1c2UubWV0YSxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0cy5tZXRhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYXVzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUUlBDRXJyb3JSZXNwb25zZShjYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLmVycm9yLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcignVW5rbm93biBlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBjYXVzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoY2F1c2UubWVzc2FnZSwge1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGNhdXNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRzKXtcbiAgICAgICAgY29uc3QgY2F1c2UgPSBvcHRzPy5jYXVzZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWVycm9yLWNhdXNlXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIGNhdXNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1ldGEgPSBvcHRzPy5tZXRhO1xuICAgICAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgICAgIHRoaXMuc2hhcGUgPSBvcHRzPy5yZXN1bHQ/LmVycm9yO1xuICAgICAgICB0aGlzLmRhdGEgPSBvcHRzPy5yZXN1bHQ/LmVycm9yLmRhdGE7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUUlBDQ2xpZW50RXJyb3InO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVFJQQ0NsaWVudEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUUlBDQ2xpZW50RXJyb3IgYXMgVCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-f58ceda1.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error('Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new');\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error('Aborted'));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error('Input is too big for a single dispatch'));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise , cancel  } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error('Missing result'));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(',');\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader('query'));\n            const mutation = dataLoader(batchLoader('mutation'));\n            const subscription = dataLoader(batchLoader('subscription'));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op  })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise , cancel  } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\n\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(',');\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise , cancel  } = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === 'function') {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n\n\nconst isFunction = (fn)=>typeof fn === 'function';\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (typeof window !== 'undefined' && isFunction(window.fetch)) {\n        return window.fetch;\n    }\n    if (typeof globalThis !== 'undefined' && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error('No fetch implementation found');\n}\n\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof window !== 'undefined' && window.AbortController) {\n        return window.AbortController;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== 'undefined' && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\n\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, ''),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: 'GET',\n    mutation: 'POST'\n};\nfunction getInput(opts) {\n    return 'input' in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + '/' + opts.path;\n    const queryParts = [];\n    if ('inputs' in opts) {\n        queryParts.push('batch=1');\n    }\n    if (opts.type === 'query') {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += '?' + queryParts.join('&');\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === 'query') {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: 'application/json',\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type  } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === 'subscription') {\n        throw new Error('Subscriptions should use wsLink');\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            'content-type': opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            'trpc-batch-mode': opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvaHR0cFV0aWxzLWY1OGNlZGExLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRTs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDBDQUEwQztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxJQUFJO0FBQ2Q7QUFDQTtBQUNBLFVBQVUsSUFBSTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLG1CQUFtQiw0REFBZTtBQUNsQztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2h0dHBVdGlscy1mNThjZWRhMS5tanM/OGJmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUIGFzIFRSUENDbGllbnRFcnJvciB9IGZyb20gJy4vVFJQQ0NsaWVudEVycm9yLTBkZTRkMjMxLm1qcyc7XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSAoZm4pPT50eXBlb2YgZm4gPT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiBnZXRGZXRjaChjdXN0b21GZXRjaEltcGwpIHtcbiAgICBpZiAoY3VzdG9tRmV0Y2hJbXBsKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21GZXRjaEltcGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBpc0Z1bmN0aW9uKHdpbmRvdy5mZXRjaCkpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5mZXRjaDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBpc0Z1bmN0aW9uKGdsb2JhbFRoaXMuZmV0Y2gpKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLmZldGNoO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGZldGNoIGltcGxlbWVudGF0aW9uIGZvdW5kJyk7XG59XG5cbmZ1bmN0aW9uIGdldEFib3J0Q29udHJvbGxlcihjdXN0b21BYm9ydENvbnRyb2xsZXJJbXBsKSB7XG4gICAgaWYgKGN1c3RvbUFib3J0Q29udHJvbGxlckltcGwpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbUFib3J0Q29udHJvbGxlckltcGw7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW9wdGlvbmFsLWNoYWluXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5BYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5BYm9ydENvbnRyb2xsZXI7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW9wdGlvbmFsLWNoYWluXG4gICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzLkFib3J0Q29udHJvbGxlcikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5BYm9ydENvbnRyb2xsZXI7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlSFRUUExpbmtPcHRpb25zKG9wdHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IG9wdHMudXJsLnRvU3RyaW5nKCkucmVwbGFjZSgvXFwvJC8sICcnKSxcbiAgICAgICAgZmV0Y2g6IG9wdHMuZmV0Y2gsXG4gICAgICAgIEFib3J0Q29udHJvbGxlcjogZ2V0QWJvcnRDb250cm9sbGVyKG9wdHMuQWJvcnRDb250cm9sbGVyKVxuICAgIH07XG59XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdHJwYy90cnBjL3B1bGwvNjY5XG5mdW5jdGlvbiBhcnJheVRvRGljdChhcnJheSkge1xuICAgIGNvbnN0IGRpY3QgPSB7fTtcbiAgICBmb3IobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhcnJheS5sZW5ndGg7IGluZGV4Kyspe1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBkaWN0W2luZGV4XSA9IGVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBkaWN0O1xufVxuY29uc3QgTUVUSE9EID0ge1xuICAgIHF1ZXJ5OiAnR0VUJyxcbiAgICBtdXRhdGlvbjogJ1BPU1QnXG59O1xuZnVuY3Rpb24gZ2V0SW5wdXQob3B0cykge1xuICAgIHJldHVybiAnaW5wdXQnIGluIG9wdHMgPyBvcHRzLnJ1bnRpbWUudHJhbnNmb3JtZXIuc2VyaWFsaXplKG9wdHMuaW5wdXQpIDogYXJyYXlUb0RpY3Qob3B0cy5pbnB1dHMubWFwKChfaW5wdXQpPT5vcHRzLnJ1bnRpbWUudHJhbnNmb3JtZXIuc2VyaWFsaXplKF9pbnB1dCkpKTtcbn1cbmNvbnN0IGdldFVybCA9IChvcHRzKT0+e1xuICAgIGxldCB1cmwgPSBvcHRzLnVybCArICcvJyArIG9wdHMucGF0aDtcbiAgICBjb25zdCBxdWVyeVBhcnRzID0gW107XG4gICAgaWYgKCdpbnB1dHMnIGluIG9wdHMpIHtcbiAgICAgICAgcXVlcnlQYXJ0cy5wdXNoKCdiYXRjaD0xJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnR5cGUgPT09ICdxdWVyeScpIHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBnZXRJbnB1dChvcHRzKTtcbiAgICAgICAgaWYgKGlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFydHMucHVzaChgaW5wdXQ9JHtlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVlcnlQYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgdXJsICs9ICc/JyArIHF1ZXJ5UGFydHMuam9pbignJicpO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufTtcbmNvbnN0IGdldEJvZHkgPSAob3B0cyk9PntcbiAgICBpZiAob3B0cy50eXBlID09PSAncXVlcnknKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGlucHV0ID0gZ2V0SW5wdXQob3B0cyk7XG4gICAgcmV0dXJuIGlucHV0ICE9PSB1bmRlZmluZWQgPyBKU09OLnN0cmluZ2lmeShpbnB1dCkgOiB1bmRlZmluZWQ7XG59O1xuY29uc3QganNvbkh0dHBSZXF1ZXN0ZXIgPSAob3B0cyk9PntcbiAgICByZXR1cm4gaHR0cFJlcXVlc3Qoe1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICBjb250ZW50VHlwZUhlYWRlcjogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICBnZXRVcmwsXG4gICAgICAgIGdldEJvZHlcbiAgICB9KTtcbn07XG5hc3luYyBmdW5jdGlvbiBmZXRjaEhUVFBSZXNwb25zZShvcHRzLCBhYykge1xuICAgIGNvbnN0IHVybCA9IG9wdHMuZ2V0VXJsKG9wdHMpO1xuICAgIGNvbnN0IGJvZHkgPSBvcHRzLmdldEJvZHkob3B0cyk7XG4gICAgY29uc3QgeyB0eXBlICB9ID0gb3B0cztcbiAgICBjb25zdCByZXNvbHZlZEhlYWRlcnMgPSBhd2FpdCBvcHRzLmhlYWRlcnMoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLS0gQHByZXNlcnZlICovIGlmICh0eXBlID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1YnNjcmlwdGlvbnMgc2hvdWxkIHVzZSB3c0xpbmsnKTtcbiAgICB9XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgLi4ub3B0cy5jb250ZW50VHlwZUhlYWRlciA/IHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiBvcHRzLmNvbnRlbnRUeXBlSGVhZGVyXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgLi4ub3B0cy5iYXRjaE1vZGVIZWFkZXIgPyB7XG4gICAgICAgICAgICAndHJwYy1iYXRjaC1tb2RlJzogb3B0cy5iYXRjaE1vZGVIZWFkZXJcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICAuLi5yZXNvbHZlZEhlYWRlcnNcbiAgICB9O1xuICAgIHJldHVybiBnZXRGZXRjaChvcHRzLmZldGNoKSh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiBNRVRIT0RbdHlwZV0sXG4gICAgICAgIHNpZ25hbDogYWM/LnNpZ25hbCxcbiAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgaGVhZGVyc1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaHR0cFJlcXVlc3Qob3B0cykge1xuICAgIGNvbnN0IGFjID0gb3B0cy5BYm9ydENvbnRyb2xsZXIgPyBuZXcgb3B0cy5BYm9ydENvbnRyb2xsZXIoKSA6IG51bGw7XG4gICAgY29uc3QgbWV0YSA9IHt9O1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgIGZldGNoSFRUUFJlc3BvbnNlKG9wdHMsIGFjKS50aGVuKChfcmVzKT0+e1xuICAgICAgICAgICAgbWV0YS5yZXNwb25zZSA9IF9yZXM7XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfcmVzLmpzb24oKTtcbiAgICAgICAgfSkudGhlbigoanNvbik9PntcbiAgICAgICAgICAgIG1ldGEucmVzcG9uc2VKU09OID0ganNvbjtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGpzb246IGpzb24sXG4gICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpPT57XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlamVjdChUUlBDQ2xpZW50RXJyb3IuZnJvbShlcnIsIHtcbiAgICAgICAgICAgICAgICBtZXRhXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGNhbmNlbCA9ICgpPT57XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgICAgYWM/LmFib3J0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2UsXG4gICAgICAgIGNhbmNlbFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGdldEJvZHkgYXMgYSwgZ2V0RmV0Y2ggYXMgYiwgZmV0Y2hIVFRQUmVzcG9uc2UgYXMgZiwgZ2V0VXJsIGFzIGcsIGh0dHBSZXF1ZXN0IGFzIGgsIGpzb25IdHRwUmVxdWVzdGVyIGFzIGosIHJlc29sdmVIVFRQTGlua09wdGlvbnMgYXMgciB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@trpc/client/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCProxyClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-f58ceda1.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n/* harmony import */ var _httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-204206a5.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpBatchLink-204206a5.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type , input , path , context ={}  }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise , abort  } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener('abort', abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: 'query',\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: 'mutation',\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: 'subscription',\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === 'started') {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === 'stopped') {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if ('input' in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\n\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\n\nconst clientCallTypeMap = {\n    query: 'query',\n    mutate: 'mutation',\n    subscribe: 'subscription'\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === '__untypedClient') {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path , args  })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join('.');\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\n\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof window !== 'undefined' && window.TextDecoder) {\n        return new window.TextDecoder();\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== 'undefined' && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error('No TextDecoder implementation found');\n}\n\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === '}') {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(':');\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = '';\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split('\\n');\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if ('getReader' in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on('data', onChunk);\n        stream.on('end', resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: 'application/json',\n        batchModeHeader: 'stream',\n        getUrl: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error('Received response without body');\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\n\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(',');\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel , promise  } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === 'function') {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_204206a5_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\n\nconst getBody = (opts)=>{\n    if (!('input' in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error('Input is not FormData');\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== 'mutation') {\n        // TODO(?) handle formdata queries\n        throw new Error('We only handle mutations with formdata');\n    }\n    return (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n/* harmony import */ var _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-f58ceda1.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/httpUtils-f58ceda1.mjs\");\n\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op  })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path , input , type  } = op;\n                    const { promise , cancel  } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === 'function') {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_f58ceda1_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvbGlua3MvaHR0cExpbmsubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUNrQjtBQUNBO0FBQ3lCOztBQUVoRztBQUNBO0FBQ0EsNkJBQTZCLDBEQUFzQjtBQUNuRCw2QkFBNkIsS0FBSyxHQUFHLG1FQUFVO0FBQy9DLDRCQUE0Qix1QkFBdUI7QUFDbkQsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxnRUFBZTtBQUMzRDtBQUNBLDJDQUEyQyw0REFBZTtBQUMxRDtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EscUJBQXFCO0FBQ3JCLHVDQUF1Qyw0REFBZTtBQUN0RDtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFpQjtBQUNoQyxDQUFDOztBQUVvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcz8yMjkzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyB0IGFzIHRyYW5zZm9ybVJlc3VsdCB9IGZyb20gJy4uL3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMnO1xuaW1wb3J0IHsgVCBhcyBUUlBDQ2xpZW50RXJyb3IgfSBmcm9tICcuLi9UUlBDQ2xpZW50RXJyb3ItMGRlNGQyMzEubWpzJztcbmltcG9ydCB7IHIgYXMgcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucywgaiBhcyBqc29uSHR0cFJlcXVlc3RlciB9IGZyb20gJy4uL2h0dHBVdGlscy1mNThjZWRhMS5tanMnO1xuXG5mdW5jdGlvbiBodHRwTGlua0ZhY3RvcnkoZmFjdG9yeU9wdHMpIHtcbiAgICByZXR1cm4gKG9wdHMpPT57XG4gICAgICAgIGNvbnN0IHJlc29sdmVkT3B0cyA9IHJlc29sdmVIVFRQTGlua09wdGlvbnMob3B0cyk7XG4gICAgICAgIHJldHVybiAocnVudGltZSk9Pih7IG9wICB9KT0+b2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcGF0aCAsIGlucHV0ICwgdHlwZSAgfSA9IG9wO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHByb21pc2UgLCBjYW5jZWwgIH0gPSBmYWN0b3J5T3B0cy5yZXF1ZXN0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVzb2x2ZWRPcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdHMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5oZWFkZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmhlYWRlcnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmhlYWRlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWV0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKChyZXMpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhID0gcmVzLm1ldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybVJlc3VsdChyZXMuanNvbiwgcnVudGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybWVkLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoVFJQQ0NsaWVudEVycm9yLmZyb20odHJhbnNmb3JtZWQuZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiByZXMubWV0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHRyYW5zZm9ybWVkLnJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoY2F1c2UpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihUUlBDQ2xpZW50RXJyb3IuZnJvbShjYXVzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogQHNlZSBodHRwczovL3RycGMuaW8vZG9jcy9jbGllbnQvbGlua3MvaHR0cExpbmtcbiAqLyBjb25zdCBodHRwTGluayA9IGh0dHBMaW5rRmFjdG9yeSh7XG4gICAgcmVxdWVzdGVyOiBqc29uSHR0cFJlcXVlc3RlclxufSk7XG5cbmV4cG9ydCB7IGh0dHBMaW5rLCBodHRwTGlua0ZhY3RvcnkgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === 'undefined') {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            '72e3ff',\n            '3fb0d8'\n        ],\n        mutation: [\n            'c5a3fc',\n            '904dfc'\n        ],\n        subscription: [\n            'ff49e1',\n            'd83fbe'\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                '\\x1b[30;46m',\n                '\\x1b[97;46m'\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                '\\x1b[30;45m',\n                '\\x1b[97;45m'\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                '\\x1b[30;42m',\n                '\\x1b[97;42m'\n            ]\n        },\n        bold: {\n            query: [\n                '\\x1b[1;30;46m',\n                '\\x1b[1;97;46m'\n            ],\n            mutation: [\n                '\\x1b[1;30;45m',\n                '\\x1b[1;97;45m'\n            ],\n            subscription: [\n                '\\x1b[1;30;42m',\n                '\\x1b[1;97;42m'\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction , type , path , id , input  } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === 'ansi') {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = '\\x1b[0m';\n        parts.push(direction === 'up' ? lightRegular : darkRegular, direction === 'up' ? '>>' : '<<', type, direction === 'up' ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === 'up') {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: 'result' in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === 'up' ? light : dark}; \n    color: ${direction === 'up' ? 'black' : 'white'};\n    padding: 2px;\n  `;\n    parts.push('%c', direction === 'up' ? '>>' : '<<', type, `#${id}`, `%c${path}%c`, '%O');\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === 'up') {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c =console , colorMode ='css'  })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts , args  } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === 'down' && props.result && (props.result instanceof Error || 'error' in props.result.result) ? 'error' : 'log';\n        c[fn].apply(null, [\n            parts.join(' ')\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled =()=>true  } = opts;\n    const colorMode = opts.colorMode ?? (typeof window === 'undefined' ? 'ansi' : 'css');\n    const { logger =defaultLogger({\n        c: opts.console,\n        colorMode\n    })  } = opts;\n    return ()=>{\n        return ({ op , next  })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: 'up'\n                }) && logger({\n                    ...op,\n                    direction: 'up'\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: 'down',\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: 'down',\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-0de4d231.mjs */ \"(ssr)/./node_modules/@trpc/client/dist/TRPCClientError-0de4d231.mjs\");\n\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\n\nfunction createWSClient(opts) {\n    const { url , WebSocket: WebSocketImpl = WebSocket , retryDelayMs: retryDelayFn = retryDelay , onOpen , onClose ,  } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = 'connecting';\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== 'open' || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === 'closed') {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = 'connecting';\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = 'connecting';\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === 'subscription') {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === 'function' ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener('open', ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = 'open';\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener('error', ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === 'reconnect' && conn === activeConnection) {\n                if (state === 'open') {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === 'subscription') {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if ('result' in data && data.result.type === 'stopped' && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener('message', ({ data  })=>{\n            const msg = JSON.parse(data);\n            if ('method' in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === 'closed') {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener('close', ({ code  })=>{\n            if (state === 'open') {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === 'closed') {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === 'subscription') {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError('WebSocket closed prematurely')));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type , input , path , id  } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === 'subscription') {\n                outgoing.push({\n                    id,\n                    method: 'subscription.stop'\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = 'closed';\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'TRPCWebSocketClosedError';\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client  } = opts;\n        return ({ op  })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type , path , id , context  } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_0de4d231_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== 'subscription') {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\");\n\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error('No more links to execute - did you forget to add an ending link?');\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\n\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3Qvc3BsaXRMaW5rLTRjNzVmN2JlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7O0FBRXJEO0FBQ0EsV0FBVyxtRUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1FQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVyb0dyb3cvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3Qvc3BsaXRMaW5rLTRjNzVmN2JlLm1qcz8wNzhmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5cbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gY3JlYXRlQ2hhaW4ob3B0cykge1xuICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZShpbmRleCA9IDAsIG9wID0gb3B0cy5vcCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IG9wdHMubGlua3NbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb3JlIGxpbmtzIHRvIGV4ZWN1dGUgLSBkaWQgeW91IGZvcmdldCB0byBhZGQgYW4gZW5kaW5nIGxpbms/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBuZXh0KHtcbiAgICAgICAgICAgICAgICBvcCxcbiAgICAgICAgICAgICAgICBuZXh0IChuZXh0T3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE9ic2VydmVyID0gZXhlY3V0ZShpbmRleCArIDEsIG5leHRPcCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0T2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9icyQgPSBleGVjdXRlKCk7XG4gICAgICAgIHJldHVybiBvYnMkLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtcbiAgICAgICAgdmFsdWVcbiAgICBdO1xufVxuZnVuY3Rpb24gc3BsaXRMaW5rKG9wdHMpIHtcbiAgICByZXR1cm4gKHJ1bnRpbWUpPT57XG4gICAgICAgIGNvbnN0IHllcyA9IGFzQXJyYXkob3B0cy50cnVlKS5tYXAoKGxpbmspPT5saW5rKHJ1bnRpbWUpKTtcbiAgICAgICAgY29uc3Qgbm8gPSBhc0FycmF5KG9wdHMuZmFsc2UpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICByZXR1cm4gKHByb3BzKT0+e1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gb3B0cy5jb25kaXRpb24ocHJvcHMub3ApID8geWVzIDogbm87XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluKHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IHByb3BzLm9wLFxuICAgICAgICAgICAgICAgICAgICBsaW5rc1xuICAgICAgICAgICAgICAgIH0pLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjcmVhdGVDaGFpbiBhcyBjLCBzcGxpdExpbmsgYXMgcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if ('error' in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === 'data') && {\n            type: 'data',\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super('Unable to transform response from server');\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== 'number')) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvY2xpZW50L2Rpc3QvdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanM/OTBmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbi8vIEZJWE1FOlxuLy8gLSB0aGUgZ2VuZXJpY3MgaGVyZSBhcmUgcHJvYmFibHkgdW5uZWNlc3Nhcnlcbi8vIC0gdGhlIFJQQy1zcGVjIGNvdWxkIHByb2JhYmx5IGJlIHNpbXBsaWZpZWQgdG8gY29tYmluZSBIVFRQICsgV1Ncbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHJ1bnRpbWUudHJhbnNmb3JtZXIuZGVzZXJpYWxpemUocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3BvbnNlLnJlc3VsdCxcbiAgICAgICAgLi4uKCFyZXNwb25zZS5yZXN1bHQudHlwZSB8fCByZXNwb25zZS5yZXN1bHQudHlwZSA9PT0gJ2RhdGEnKSAmJiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0YScsXG4gICAgICAgICAgICBkYXRhOiBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLnJlc3VsdC5kYXRhKVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgcmVzdWx0XG4gICAgfTtcbn1cbmNsYXNzIFRyYW5zZm9ybVJlc3VsdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCdVbmFibGUgdG8gdHJhbnNmb3JtIHJlc3BvbnNlIGZyb20gc2VydmVyJyk7XG4gICAgfVxufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuZCB2YWxpZGF0ZXMgdGhhdCB0aGUgcmVzdWx0IGlzIGEgdmFsaWQgVFJQQ1Jlc3BvbnNlXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiB0cmFuc2Zvcm1SZXN1bHQocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFVzZSB0aGUgZGF0YSB0cmFuc2Zvcm1lcnMgb24gdGhlIEpTT04tcmVzcG9uc2VcbiAgICAgICAgcmVzdWx0ID0gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgdGhhdCBvdXRwdXQgb2YgdGhlIHRyYW5zZm9ybWVycyBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICAgIGlmICghcmVzdWx0Lm9rICYmICghaXNPYmplY3QocmVzdWx0LmVycm9yLmVycm9yKSB8fCB0eXBlb2YgcmVzdWx0LmVycm9yLmVycm9yLmNvZGUgIT09ICdudW1iZXInKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5vayAmJiAhaXNPYmplY3QocmVzdWx0LnJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7IGlzT2JqZWN0IGFzIGksIHRyYW5zZm9ybVJlc3VsdCBhcyB0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCContext),\n/* harmony export */   a: () => (/* binding */ createReactQueryUtilsProxy),\n/* harmony export */   b: () => (/* binding */ createReactProxyDecoration),\n/* harmony export */   c: () => (/* binding */ createHooksInternal),\n/* harmony export */   d: () => (/* binding */ getClientArgs),\n/* harmony export */   e: () => (/* binding */ createUseQueriesProxy),\n/* harmony export */   f: () => (/* binding */ createRootHooks),\n/* harmony export */   g: () => (/* binding */ getQueryKey),\n/* harmony export */   h: () => (/* binding */ contextProps)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/./node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQueries.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n\n\n\n/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */ function getQueryKeyInternal(path, input) {\n    if (path.length) return input === undefined ? [\n        path\n    ] : [\n        path,\n        input\n    ];\n    return [];\n}\n/**\n * Method to extract the query key for a procedure\n * @param procedureOrRouter - procedure or AnyRouter\n * @param input - input to procedureOrRouter\n * @param type - defaults to `any`\n * @link https://trpc.io/docs/getQueryKey\n */ function getQueryKey(..._params) {\n    const [procedureOrRouter, input, type] = _params;\n    // @ts-expect-error - we don't expose _def on the type layer\n    const path = procedureOrRouter._def().path;\n    const dotPath = path.join('.');\n    const queryKey = (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(getQueryKeyInternal(dotPath, input), type ?? 'any');\n    return queryKey;\n}\n\n/**\n * Create proxy for decorating procedures\n * @internal\n */ function createReactProxyDecoration(name, hooks) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const args = opts.args;\n        const pathCopy = [\n            name,\n            ...opts.path\n        ];\n        // The last arg is for instance `.useMutation` or `.useQuery()`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const lastArg = pathCopy.pop();\n        // The `path` ends up being something like `post.byId`\n        const path = pathCopy.join('.');\n        if (lastArg === 'useMutation') {\n            return hooks[lastArg](path, ...args);\n        }\n        const [input, ...rest] = args;\n        const queryKey = getQueryKeyInternal(path, input);\n        // Expose queryKey helper\n        if (lastArg === 'getQueryKey') {\n            return (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, rest[0] ?? 'any');\n        }\n        if (lastArg === '_def') {\n            return {\n                path: pathCopy\n            };\n        }\n        if (lastArg.startsWith('useSuspense')) {\n            const opts1 = rest[0] || {};\n            const fn = lastArg === 'useSuspenseQuery' ? 'useQuery' : 'useInfiniteQuery';\n            const result = hooks[fn](queryKey, {\n                ...opts1,\n                suspense: true,\n                enabled: true\n            });\n            return [\n                result.data,\n                result\n            ];\n        }\n        return hooks[lastArg](queryKey, ...rest);\n    });\n}\n\nconst contextProps = [\n    'client',\n    'ssrContext',\n    'ssrState',\n    'abortOnUnmount'\n];\nconst TRPCContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n\n/**\n * @internal\n */ function createReactQueryUtilsProxy(context) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createFlatProxy)((key)=>{\n        const contextName = key;\n        if (contextName === 'client') {\n            return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClientProxy)(context.client);\n        }\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(({ path , args  })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join('.');\n            const getOpts = (name)=>{\n                if ([\n                    'setData',\n                    'setInfiniteData'\n                ].includes(name)) {\n                    const [input, updater, ...rest] = args;\n                    const queryKey = getQueryKeyInternal(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest\n                    };\n                }\n                const [input1, ...rest1] = args;\n                const queryKey1 = getQueryKeyInternal(fullPath, input1);\n                return {\n                    queryKey: queryKey1,\n                    rest: rest1\n                };\n            };\n            const { queryKey , rest , updater  } = getOpts(utilName);\n            const contextMap = {\n                fetch: ()=>context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: ()=>context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, ...rest),\n                ensureData: ()=>context.ensureQueryData(queryKey, ...rest),\n                invalidate: ()=>context.invalidateQueries(queryKey, ...rest),\n                reset: ()=>context.resetQueries(queryKey, ...rest),\n                refetch: ()=>context.refetchQueries(queryKey, ...rest),\n                cancel: ()=>context.cancelQuery(queryKey, ...rest),\n                setData: ()=>{\n                    context.setQueryData(queryKey, updater, ...rest);\n                },\n                setInfiniteData: ()=>{\n                    context.setInfiniteQueryData(queryKey, updater, ...rest);\n                },\n                getData: ()=>context.getQueryData(queryKey),\n                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n\n/**\n * Create proxy for `useQueries` options\n * @internal\n */ function createUseQueriesProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const path = opts.path.join('.');\n        const [input, _opts] = opts.args;\n        const queryKey = getQueryKeyInternal(path, input);\n        const options = {\n            queryKey,\n            queryFn: ()=>{\n                return client.query(path, input, _opts?.trpc);\n            },\n            ..._opts\n        };\n        return options;\n    });\n}\n\nfunction getClientArgs(pathAndInput, opts) {\n    const [path, input] = pathAndInput;\n    return [\n        path,\n        input,\n        opts?.trpc\n    ];\n}\n\n/**\n * Makes a stable reference of the `trpc` prop\n */ function useHookResult(value) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(value);\n    ref.current.path = value.path;\n    return ref.current;\n}\n\n/**\n * @internal\n */ function createRootHooks(config) {\n    const mutationSuccessOverride = (config?.overrides ?? config?.unstable_overrides)?.useMutation?.onSuccess ?? ((options)=>options.originalFn());\n    const Context = config?.context ?? TRPCContext;\n    const ReactQueryContext = config?.reactQueryContext;\n    const createClient = (opts)=>{\n        return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClient)(opts);\n    };\n    const TRPCProvider = (props)=>{\n        const { abortOnUnmount =false , client , queryClient , ssrContext  } = props;\n        const [ssrState, setSSRState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(props.ssrState ?? false);\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n            // Only updating state to `mounted` if we are using SSR.\n            // This makes it so we don't have an unnecessary re-render when opting out of SSR.\n            setSSRState((state)=>state ? 'mounted' : false);\n        }, []);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(Context.Provider, {\n            value: {\n                abortOnUnmount,\n                queryClient,\n                client,\n                ssrContext: ssrContext ?? null,\n                ssrState,\n                fetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.fetchQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                fetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.fetchInfiniteQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'),\n                        queryFn: ({ pageParam  })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.prefetchQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                prefetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.prefetchInfiniteQuery({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'),\n                        queryFn: ({ pageParam  })=>{\n                            const [path, input] = pathAndInput;\n                            const actualInput = {\n                                ...input,\n                                cursor: pageParam\n                            };\n                            return client.query(...getClientArgs([\n                                path,\n                                actualInput\n                            ], opts));\n                        }\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                ensureQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput, opts)=>{\n                    return queryClient.ensureQueryData({\n                        ...opts,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n                        queryFn: ()=>client.query(...getClientArgs(pathAndInput, opts))\n                    });\n                }, [\n                    client,\n                    queryClient\n                ]),\n                invalidateQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((queryKey, filters, options)=>{\n                    return queryClient.invalidateQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'any')\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                resetQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.resetQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'any')\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                refetchQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, filters, options] = args;\n                    return queryClient.refetchQueries({\n                        ...filters,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'any')\n                    }, options);\n                }, [\n                    queryClient\n                ]),\n                cancelQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((pathAndInput)=>{\n                    return queryClient.cancelQueries({\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'any')\n                    });\n                }, [\n                    queryClient\n                ]),\n                setQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'query'), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'query'), ...rest);\n                }, [\n                    queryClient\n                ]),\n                setInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'infinite'), ...rest);\n                }, [\n                    queryClient\n                ]),\n                getInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args)=>{\n                    const [queryKey, ...rest] = args;\n                    return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'infinite'), ...rest);\n                }, [\n                    queryClient\n                ])\n            }\n        }, props.children);\n    };\n    function useContext() {\n        return react__WEBPACK_IMPORTED_MODULE_3__.useContext(Context);\n    }\n    /**\n   * Hack to make sure errors return `status`='error` when doing SSR\n   * @link https://github.com/trpc/trpc/pull/1645\n   */ function useSSRQueryOptionsIfNeeded(pathAndInput, type, opts) {\n        const { queryClient , ssrState  } = useContext();\n        return ssrState && ssrState !== 'mounted' && queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, type))?.state.status === 'error' ? {\n            retryOnMount: false,\n            ...opts\n        } : opts;\n    }\n    function useQuery$1(// FIXME path should be a tuple in next major\n    pathAndInput, opts) {\n        const context = useContext();\n        if (!context) {\n            throw new Error('Unable to retrieve application context. Did you forget to wrap your App inside `withTRPC` HoC?');\n        }\n        const { abortOnUnmount , client , ssrState , queryClient , prefetchQuery  } = context;\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'));\n        if (typeof window === 'undefined' && ssrState === 'prepass' && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'))) {\n            void prefetchQuery(pathAndInput, opts);\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, 'query', {\n            ...defaultOpts,\n            ...opts\n        });\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                return client.query(...getClientArgs(pathAndInput, actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path: pathAndInput[0]\n        });\n        return hook;\n    }\n    function useMutation$1(// FIXME: this should only be a tuple path in next major\n    path, opts) {\n        const { client  } = useContext();\n        const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useQueryClient)({\n            context: ReactQueryContext\n        });\n        const actualPath = Array.isArray(path) ? path[0] : path;\n        const defaultOpts = queryClient.getMutationDefaults([\n            actualPath.split('.')\n        ]);\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useMutation)({\n            ...opts,\n            mutationKey: [\n                actualPath.split('.')\n            ],\n            mutationFn: (input)=>{\n                return client.mutation(...getClientArgs([\n                    actualPath,\n                    input\n                ], opts));\n            },\n            context: ReactQueryContext,\n            onSuccess (...args) {\n                const originalFn = ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args);\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: opts?.meta ?? defaultOpts?.meta ?? {}\n                });\n            }\n        });\n        hook.trpc = useHookResult({\n            path: actualPath\n        });\n        return hook;\n    }\n    /* istanbul ignore next -- @preserve */ function useSubscription(pathAndInput, opts) {\n        const enabled = opts?.enabled ?? true;\n        const queryKey = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.hashQueryKey)(pathAndInput);\n        const { client  } = useContext();\n        const optsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(opts);\n        optsRef.current = opts;\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n            if (!enabled) {\n                return;\n            }\n            const [path, input] = pathAndInput;\n            let isStopped = false;\n            const subscription = client.subscription(path, input ?? undefined, {\n                onStarted: ()=>{\n                    if (!isStopped) {\n                        optsRef.current.onStarted?.();\n                    }\n                },\n                onData: (data)=>{\n                    if (!isStopped) {\n                        // FIXME this shouldn't be needed as both should be `unknown` in next major\n                        optsRef.current.onData(data);\n                    }\n                },\n                onError: (err)=>{\n                    if (!isStopped) {\n                        optsRef.current.onError?.(err);\n                    }\n                }\n            });\n            return ()=>{\n                isStopped = true;\n                subscription.unsubscribe();\n            };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [\n            queryKey,\n            enabled\n        ]);\n    }\n    function useInfiniteQuery$1(pathAndInput, opts) {\n        const [path, input] = pathAndInput;\n        const { client , ssrState , prefetchInfiniteQuery , queryClient , abortOnUnmount ,  } = useContext();\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'));\n        if (typeof window === 'undefined' && ssrState === 'prepass' && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'))) {\n            void prefetchInfiniteQuery(pathAndInput, {\n                ...defaultOpts,\n                ...opts\n            });\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, 'infinite', {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.useInfiniteQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'),\n            queryFn: (queryFunctionContext)=>{\n                const actualOpts = {\n                    ...ssrOpts,\n                    trpc: {\n                        ...ssrOpts?.trpc,\n                        ...shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {}\n                    }\n                };\n                const actualInput = {\n                    ...input ?? {},\n                    cursor: queryFunctionContext.pageParam ?? opts?.initialCursor\n                };\n                // FIXME as any shouldn't be needed as client should be untyped too\n                return client.query(...getClientArgs([\n                    path,\n                    actualInput\n                ], actualOpts));\n            },\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    const useQueries$1 = (queriesCallback, context)=>{\n        const { ssrState , queryClient , prefetchQuery , client  } = useContext();\n        const proxy = createUseQueriesProxy(client);\n        const queries = queriesCallback(proxy);\n        if (typeof window === 'undefined' && ssrState === 'prepass') {\n            for (const query of queries){\n                const queryOption = query;\n                if (queryOption.trpc?.ssr !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryOption.queryKey, 'query'))) {\n                    void prefetchQuery(queryOption.queryKey, queryOption);\n                }\n            }\n        }\n        return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueries)({\n            queries: queries.map((query)=>({\n                    ...query,\n                    queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(query.queryKey, 'query')\n                })),\n            context\n        });\n    };\n    const useDehydratedState = (client, trpcState)=>{\n        const transformed = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n            if (!trpcState) {\n                return trpcState;\n            }\n            return client.runtime.transformer.deserialize(trpcState);\n        }, [\n            trpcState,\n            client\n        ]);\n        return transformed;\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        useQueries: useQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useDehydratedState,\n        useInfiniteQuery: useInfiniteQuery$1\n    };\n}\n\n/**\n * Create strongly typed react hooks\n * @internal\n * @deprecated\n */ function createHooksInternal(config) {\n    return createRootHooks(config);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9jcmVhdGVIb29rc0ludGVybmFsLWJkZmY3MTcxLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRFO0FBQ0o7QUFDRDtBQUNtRDtBQUMxQjs7QUFFaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixpRUFBZ0I7QUFDckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUVBQW9CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUVBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msb0RBQWE7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0VBQWU7QUFDMUI7QUFDQTtBQUNBLG1CQUFtQixtRUFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlFQUFvQixJQUFJLGNBQWM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5RUFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDZDQUFNO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsOERBQWdCO0FBQy9CO0FBQ0E7QUFDQSxnQkFBZ0IsNkRBQTZEO0FBQzdFLHdDQUF3QywrQ0FBUTtBQUNoRCxRQUFRLGdEQUFTO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw2QkFBNkIsZ0RBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrREFBVztBQUN2QztBQUNBO0FBQ0Esa0NBQWtDLGlFQUFnQjtBQUNsRDtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFXO0FBQy9DO0FBQ0E7QUFDQSxrQ0FBa0MsaUVBQWdCO0FBQ2xELG9DQUFvQyxZQUFZO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0RBQVc7QUFDMUM7QUFDQTtBQUNBLGtDQUFrQyxpRUFBZ0I7QUFDbEQ7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxrREFBVztBQUNsRDtBQUNBO0FBQ0Esa0NBQWtDLGlFQUFnQjtBQUNsRCxvQ0FBb0MsWUFBWTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFXO0FBQzVDO0FBQ0E7QUFDQSxrQ0FBa0MsaUVBQWdCO0FBQ2xEO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsa0RBQVc7QUFDOUM7QUFDQTtBQUNBLGtDQUFrQyxpRUFBZ0I7QUFDbEQscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsOEJBQThCLGtEQUFXO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpRUFBZ0I7QUFDbEQscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFXO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpRUFBZ0I7QUFDbEQscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNkJBQTZCLGtEQUFXO0FBQ3hDO0FBQ0Esa0NBQWtDLGlFQUFnQjtBQUNsRCxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw4QkFBOEIsa0RBQVc7QUFDekM7QUFDQSxvREFBb0QsaUVBQWdCO0FBQ3BFLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsOEJBQThCLGtEQUFXO0FBQ3pDO0FBQ0Esb0RBQW9ELGlFQUFnQjtBQUNwRSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHNDQUFzQyxrREFBVztBQUNqRDtBQUNBLG9EQUFvRCxpRUFBZ0I7QUFDcEUsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxzQ0FBc0Msa0RBQVc7QUFDakQ7QUFDQSxvREFBb0QsaUVBQWdCO0FBQ3BFLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGVBQWUsNkNBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDLHNGQUFzRixpRUFBZ0I7QUFDdEc7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvRUFBb0U7QUFDcEYseURBQXlELGlFQUFnQjtBQUN6RSwyTEFBMkwsaUVBQWdCO0FBQzNNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxxQkFBcUIsK0RBQVE7QUFDN0I7QUFDQSxzQkFBc0IsaUVBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUIsNEJBQTRCLHFFQUFjO0FBQzFDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtFQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1FQUFZO0FBQ3JDLGdCQUFnQixVQUFVO0FBQzFCLHdCQUF3Qiw2Q0FBTTtBQUM5QjtBQUNBLFFBQVEsZ0RBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhFQUE4RTtBQUM5Rix5REFBeUQsaUVBQWdCO0FBQ3pFLDJMQUEyTCxpRUFBZ0I7QUFDM007QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQkFBcUIsdUVBQWdCO0FBQ3JDO0FBQ0Esc0JBQXNCLGlFQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbURBQW1EO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsaUVBQWdCO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpRUFBVTtBQUN6QjtBQUNBO0FBQ0EsOEJBQThCLGlFQUFnQjtBQUM5QyxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDRCQUE0Qiw4Q0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1PIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVyb0dyb3cvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9jcmVhdGVIb29rc0ludGVybmFsLWJkZmY3MTcxLm1qcz9mZTZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlY3Vyc2l2ZVByb3h5LCBjcmVhdGVGbGF0UHJveHkgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvc2hhcmVkJztcbmltcG9ydCB7IGcgYXMgZ2V0QXJyYXlRdWVyeUtleSB9IGZyb20gJy4vZ2V0QXJyYXlRdWVyeUtleS04NjEzNGY4Yi5tanMnO1xuaW1wb3J0IHsgY3JlYXRlVFJQQ0NsaWVudFByb3h5LCBjcmVhdGVUUlBDQ2xpZW50IH0gZnJvbSAnQHRycGMvY2xpZW50JztcbmltcG9ydCB7IHVzZVF1ZXJ5LCB1c2VRdWVyeUNsaWVudCwgdXNlTXV0YXRpb24sIGhhc2hRdWVyeUtleSwgdXNlSW5maW5pdGVRdWVyeSwgdXNlUXVlcmllcyB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBXZSB0cmVhdCBgdW5kZWZpbmVkYCBhcyBhbiBpbnB1dCB0aGUgc2FtZSBhcyBvbWl0dGluZyBhbiBgaW5wdXRgXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdHJwYy90cnBjL2lzc3Vlcy8yMjkwXG4gKi8gZnVuY3Rpb24gZ2V0UXVlcnlLZXlJbnRlcm5hbChwYXRoLCBpbnB1dCkge1xuICAgIGlmIChwYXRoLmxlbmd0aCkgcmV0dXJuIGlucHV0ID09PSB1bmRlZmluZWQgPyBbXG4gICAgICAgIHBhdGhcbiAgICBdIDogW1xuICAgICAgICBwYXRoLFxuICAgICAgICBpbnB1dFxuICAgIF07XG4gICAgcmV0dXJuIFtdO1xufVxuLyoqXG4gKiBNZXRob2QgdG8gZXh0cmFjdCB0aGUgcXVlcnkga2V5IGZvciBhIHByb2NlZHVyZVxuICogQHBhcmFtIHByb2NlZHVyZU9yUm91dGVyIC0gcHJvY2VkdXJlIG9yIEFueVJvdXRlclxuICogQHBhcmFtIGlucHV0IC0gaW5wdXQgdG8gcHJvY2VkdXJlT3JSb3V0ZXJcbiAqIEBwYXJhbSB0eXBlIC0gZGVmYXVsdHMgdG8gYGFueWBcbiAqIEBsaW5rIGh0dHBzOi8vdHJwYy5pby9kb2NzL2dldFF1ZXJ5S2V5XG4gKi8gZnVuY3Rpb24gZ2V0UXVlcnlLZXkoLi4uX3BhcmFtcykge1xuICAgIGNvbnN0IFtwcm9jZWR1cmVPclJvdXRlciwgaW5wdXQsIHR5cGVdID0gX3BhcmFtcztcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gd2UgZG9uJ3QgZXhwb3NlIF9kZWYgb24gdGhlIHR5cGUgbGF5ZXJcbiAgICBjb25zdCBwYXRoID0gcHJvY2VkdXJlT3JSb3V0ZXIuX2RlZigpLnBhdGg7XG4gICAgY29uc3QgZG90UGF0aCA9IHBhdGguam9pbignLicpO1xuICAgIGNvbnN0IHF1ZXJ5S2V5ID0gZ2V0QXJyYXlRdWVyeUtleShnZXRRdWVyeUtleUludGVybmFsKGRvdFBhdGgsIGlucHV0KSwgdHlwZSA/PyAnYW55Jyk7XG4gICAgcmV0dXJuIHF1ZXJ5S2V5O1xufVxuXG4vKipcbiAqIENyZWF0ZSBwcm94eSBmb3IgZGVjb3JhdGluZyBwcm9jZWR1cmVzXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVSZWFjdFByb3h5RGVjb3JhdGlvbihuYW1lLCBob29rcykge1xuICAgIHJldHVybiBjcmVhdGVSZWN1cnNpdmVQcm94eSgob3B0cyk9PntcbiAgICAgICAgY29uc3QgYXJncyA9IG9wdHMuYXJncztcbiAgICAgICAgY29uc3QgcGF0aENvcHkgPSBbXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgLi4ub3B0cy5wYXRoXG4gICAgICAgIF07XG4gICAgICAgIC8vIFRoZSBsYXN0IGFyZyBpcyBmb3IgaW5zdGFuY2UgYC51c2VNdXRhdGlvbmAgb3IgYC51c2VRdWVyeSgpYFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBjb25zdCBsYXN0QXJnID0gcGF0aENvcHkucG9wKCk7XG4gICAgICAgIC8vIFRoZSBgcGF0aGAgZW5kcyB1cCBiZWluZyBzb21ldGhpbmcgbGlrZSBgcG9zdC5ieUlkYFxuICAgICAgICBjb25zdCBwYXRoID0gcGF0aENvcHkuam9pbignLicpO1xuICAgICAgICBpZiAobGFzdEFyZyA9PT0gJ3VzZU11dGF0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzW2xhc3RBcmddKHBhdGgsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtpbnB1dCwgLi4ucmVzdF0gPSBhcmdzO1xuICAgICAgICBjb25zdCBxdWVyeUtleSA9IGdldFF1ZXJ5S2V5SW50ZXJuYWwocGF0aCwgaW5wdXQpO1xuICAgICAgICAvLyBFeHBvc2UgcXVlcnlLZXkgaGVscGVyXG4gICAgICAgIGlmIChsYXN0QXJnID09PSAnZ2V0UXVlcnlLZXknKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXJyYXlRdWVyeUtleShxdWVyeUtleSwgcmVzdFswXSA/PyAnYW55Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RBcmcgPT09ICdfZGVmJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoQ29weVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEFyZy5zdGFydHNXaXRoKCd1c2VTdXNwZW5zZScpKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzMSA9IHJlc3RbMF0gfHwge307XG4gICAgICAgICAgICBjb25zdCBmbiA9IGxhc3RBcmcgPT09ICd1c2VTdXNwZW5zZVF1ZXJ5JyA/ICd1c2VRdWVyeScgOiAndXNlSW5maW5pdGVRdWVyeSc7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBob29rc1tmbl0ocXVlcnlLZXksIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzMSxcbiAgICAgICAgICAgICAgICBzdXNwZW5zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEsXG4gICAgICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob29rc1tsYXN0QXJnXShxdWVyeUtleSwgLi4ucmVzdCk7XG4gICAgfSk7XG59XG5cbmNvbnN0IGNvbnRleHRQcm9wcyA9IFtcbiAgICAnY2xpZW50JyxcbiAgICAnc3NyQ29udGV4dCcsXG4gICAgJ3NzclN0YXRlJyxcbiAgICAnYWJvcnRPblVubW91bnQnXG5dO1xuY29uc3QgVFJQQ0NvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gY3JlYXRlUmVhY3RRdWVyeVV0aWxzUHJveHkoY29udGV4dCkge1xuICAgIHJldHVybiBjcmVhdGVGbGF0UHJveHkoKGtleSk9PntcbiAgICAgICAgY29uc3QgY29udGV4dE5hbWUgPSBrZXk7XG4gICAgICAgIGlmIChjb250ZXh0TmFtZSA9PT0gJ2NsaWVudCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVUUlBDQ2xpZW50UHJveHkoY29udGV4dC5jbGllbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0UHJvcHMuaW5jbHVkZXMoY29udGV4dE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dFtjb250ZXh0TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3Vyc2l2ZVByb3h5KCh7IHBhdGggLCBhcmdzICB9KT0+e1xuICAgICAgICAgICAgY29uc3QgcGF0aENvcHkgPSBbXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIC4uLnBhdGhcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBjb25zdCB1dGlsTmFtZSA9IHBhdGhDb3B5LnBvcCgpO1xuICAgICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoQ29weS5qb2luKCcuJyk7XG4gICAgICAgICAgICBjb25zdCBnZXRPcHRzID0gKG5hbWUpPT57XG4gICAgICAgICAgICAgICAgaWYgKFtcbiAgICAgICAgICAgICAgICAgICAgJ3NldERhdGEnLFxuICAgICAgICAgICAgICAgICAgICAnc2V0SW5maW5pdGVEYXRhJ1xuICAgICAgICAgICAgICAgIF0uaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW2lucHV0LCB1cGRhdGVyLCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5S2V5ID0gZ2V0UXVlcnlLZXlJbnRlcm5hbChmdWxsUGF0aCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbaW5wdXQxLCAuLi5yZXN0MV0gPSBhcmdzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5S2V5MSA9IGdldFF1ZXJ5S2V5SW50ZXJuYWwoZnVsbFBhdGgsIGlucHV0MSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5MSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdDogcmVzdDFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgcXVlcnlLZXkgLCByZXN0ICwgdXBkYXRlciAgfSA9IGdldE9wdHModXRpbE5hbWUpO1xuICAgICAgICAgICAgY29uc3QgY29udGV4dE1hcCA9IHtcbiAgICAgICAgICAgICAgICBmZXRjaDogKCk9PmNvbnRleHQuZmV0Y2hRdWVyeShxdWVyeUtleSwgLi4ucmVzdCksXG4gICAgICAgICAgICAgICAgZmV0Y2hJbmZpbml0ZTogKCk9PmNvbnRleHQuZmV0Y2hJbmZpbml0ZVF1ZXJ5KHF1ZXJ5S2V5LCAuLi5yZXN0KSxcbiAgICAgICAgICAgICAgICBwcmVmZXRjaDogKCk9PmNvbnRleHQucHJlZmV0Y2hRdWVyeShxdWVyeUtleSwgLi4ucmVzdCksXG4gICAgICAgICAgICAgICAgcHJlZmV0Y2hJbmZpbml0ZTogKCk9PmNvbnRleHQucHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5KHF1ZXJ5S2V5LCAuLi5yZXN0KSxcbiAgICAgICAgICAgICAgICBlbnN1cmVEYXRhOiAoKT0+Y29udGV4dC5lbnN1cmVRdWVyeURhdGEocXVlcnlLZXksIC4uLnJlc3QpLFxuICAgICAgICAgICAgICAgIGludmFsaWRhdGU6ICgpPT5jb250ZXh0LmludmFsaWRhdGVRdWVyaWVzKHF1ZXJ5S2V5LCAuLi5yZXN0KSxcbiAgICAgICAgICAgICAgICByZXNldDogKCk9PmNvbnRleHQucmVzZXRRdWVyaWVzKHF1ZXJ5S2V5LCAuLi5yZXN0KSxcbiAgICAgICAgICAgICAgICByZWZldGNoOiAoKT0+Y29udGV4dC5yZWZldGNoUXVlcmllcyhxdWVyeUtleSwgLi4ucmVzdCksXG4gICAgICAgICAgICAgICAgY2FuY2VsOiAoKT0+Y29udGV4dC5jYW5jZWxRdWVyeShxdWVyeUtleSwgLi4ucmVzdCksXG4gICAgICAgICAgICAgICAgc2V0RGF0YTogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRRdWVyeURhdGEocXVlcnlLZXksIHVwZGF0ZXIsIC4uLnJlc3QpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0SW5maW5pdGVEYXRhOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldEluZmluaXRlUXVlcnlEYXRhKHF1ZXJ5S2V5LCB1cGRhdGVyLCAuLi5yZXN0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdldERhdGE6ICgpPT5jb250ZXh0LmdldFF1ZXJ5RGF0YShxdWVyeUtleSksXG4gICAgICAgICAgICAgICAgZ2V0SW5maW5pdGVEYXRhOiAoKT0+Y29udGV4dC5nZXRJbmZpbml0ZVF1ZXJ5RGF0YShxdWVyeUtleSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dE1hcFt1dGlsTmFtZV0oKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHByb3h5IGZvciBgdXNlUXVlcmllc2Agb3B0aW9uc1xuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gY3JlYXRlVXNlUXVlcmllc1Byb3h5KGNsaWVudCkge1xuICAgIHJldHVybiBjcmVhdGVSZWN1cnNpdmVQcm94eSgob3B0cyk9PntcbiAgICAgICAgY29uc3QgcGF0aCA9IG9wdHMucGF0aC5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IFtpbnB1dCwgX29wdHNdID0gb3B0cy5hcmdzO1xuICAgICAgICBjb25zdCBxdWVyeUtleSA9IGdldFF1ZXJ5S2V5SW50ZXJuYWwocGF0aCwgaW5wdXQpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgcXVlcnlLZXksXG4gICAgICAgICAgICBxdWVyeUZuOiAoKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQucXVlcnkocGF0aCwgaW5wdXQsIF9vcHRzPy50cnBjKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5fb3B0c1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50QXJncyhwYXRoQW5kSW5wdXQsIG9wdHMpIHtcbiAgICBjb25zdCBbcGF0aCwgaW5wdXRdID0gcGF0aEFuZElucHV0O1xuICAgIHJldHVybiBbXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGlucHV0LFxuICAgICAgICBvcHRzPy50cnBjXG4gICAgXTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhIHN0YWJsZSByZWZlcmVuY2Ugb2YgdGhlIGB0cnBjYCBwcm9wXG4gKi8gZnVuY3Rpb24gdXNlSG9va1Jlc3VsdCh2YWx1ZSkge1xuICAgIGNvbnN0IHJlZiA9IHVzZVJlZih2YWx1ZSk7XG4gICAgcmVmLmN1cnJlbnQucGF0aCA9IHZhbHVlLnBhdGg7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGNyZWF0ZVJvb3RIb29rcyhjb25maWcpIHtcbiAgICBjb25zdCBtdXRhdGlvblN1Y2Nlc3NPdmVycmlkZSA9IChjb25maWc/Lm92ZXJyaWRlcyA/PyBjb25maWc/LnVuc3RhYmxlX292ZXJyaWRlcyk/LnVzZU11dGF0aW9uPy5vblN1Y2Nlc3MgPz8gKChvcHRpb25zKT0+b3B0aW9ucy5vcmlnaW5hbEZuKCkpO1xuICAgIGNvbnN0IENvbnRleHQgPSBjb25maWc/LmNvbnRleHQgPz8gVFJQQ0NvbnRleHQ7XG4gICAgY29uc3QgUmVhY3RRdWVyeUNvbnRleHQgPSBjb25maWc/LnJlYWN0UXVlcnlDb250ZXh0O1xuICAgIGNvbnN0IGNyZWF0ZUNsaWVudCA9IChvcHRzKT0+e1xuICAgICAgICByZXR1cm4gY3JlYXRlVFJQQ0NsaWVudChvcHRzKTtcbiAgICB9O1xuICAgIGNvbnN0IFRSUENQcm92aWRlciA9IChwcm9wcyk9PntcbiAgICAgICAgY29uc3QgeyBhYm9ydE9uVW5tb3VudCA9ZmFsc2UgLCBjbGllbnQgLCBxdWVyeUNsaWVudCAsIHNzckNvbnRleHQgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgW3NzclN0YXRlLCBzZXRTU1JTdGF0ZV0gPSB1c2VTdGF0ZShwcm9wcy5zc3JTdGF0ZSA/PyBmYWxzZSk7XG4gICAgICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICAgICAgLy8gT25seSB1cGRhdGluZyBzdGF0ZSB0byBgbW91bnRlZGAgaWYgd2UgYXJlIHVzaW5nIFNTUi5cbiAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgaXQgc28gd2UgZG9uJ3QgaGF2ZSBhbiB1bm5lY2Vzc2FyeSByZS1yZW5kZXIgd2hlbiBvcHRpbmcgb3V0IG9mIFNTUi5cbiAgICAgICAgICAgIHNldFNTUlN0YXRlKChzdGF0ZSk9PnN0YXRlID8gJ21vdW50ZWQnIDogZmFsc2UpO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICBhYm9ydE9uVW5tb3VudCxcbiAgICAgICAgICAgICAgICBxdWVyeUNsaWVudCxcbiAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgc3NyQ29udGV4dDogc3NyQ29udGV4dCA/PyBudWxsLFxuICAgICAgICAgICAgICAgIHNzclN0YXRlLFxuICAgICAgICAgICAgICAgIGZldGNoUXVlcnk6IHVzZUNhbGxiYWNrKChwYXRoQW5kSW5wdXQsIG9wdHMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5mZXRjaFF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUtleTogZ2V0QXJyYXlRdWVyeUtleShwYXRoQW5kSW5wdXQsICdxdWVyeScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlGbjogKCk9PmNsaWVudC5xdWVyeSguLi5nZXRDbGllbnRBcmdzKHBhdGhBbmRJbnB1dCwgb3B0cykpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGZldGNoSW5maW5pdGVRdWVyeTogdXNlQ2FsbGJhY2soKHBhdGhBbmRJbnB1dCwgb3B0cyk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LmZldGNoSW5maW5pdGVRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IGdldEFycmF5UXVlcnlLZXkocGF0aEFuZElucHV0LCAnaW5maW5pdGUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5Rm46ICh7IHBhZ2VQYXJhbSAgfSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcGF0aCwgaW5wdXRdID0gcGF0aEFuZElucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbElucHV0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwYWdlUGFyYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQucXVlcnkoLi4uZ2V0Q2xpZW50QXJncyhbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwgb3B0cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBwcmVmZXRjaFF1ZXJ5OiB1c2VDYWxsYmFjaygocGF0aEFuZElucHV0LCBvcHRzKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQucHJlZmV0Y2hRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IGdldEFycmF5UXVlcnlLZXkocGF0aEFuZElucHV0LCAncXVlcnknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5Rm46ICgpPT5jbGllbnQucXVlcnkoLi4uZ2V0Q2xpZW50QXJncyhwYXRoQW5kSW5wdXQsIG9wdHMpKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBwcmVmZXRjaEluZmluaXRlUXVlcnk6IHVzZUNhbGxiYWNrKChwYXRoQW5kSW5wdXQsIG9wdHMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5wcmVmZXRjaEluZmluaXRlUXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5OiBnZXRBcnJheVF1ZXJ5S2V5KHBhdGhBbmRJbnB1dCwgJ2luZmluaXRlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUZuOiAoeyBwYWdlUGFyYW0gIH0pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3BhdGgsIGlucHV0XSA9IHBhdGhBbmRJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxJbnB1dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcGFnZVBhcmFtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LnF1ZXJ5KC4uLmdldENsaWVudEFyZ3MoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIG9wdHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgZW5zdXJlUXVlcnlEYXRhOiB1c2VDYWxsYmFjaygocGF0aEFuZElucHV0LCBvcHRzKT0+e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuZW5zdXJlUXVlcnlEYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUtleTogZ2V0QXJyYXlRdWVyeUtleShwYXRoQW5kSW5wdXQsICdxdWVyeScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlGbjogKCk9PmNsaWVudC5xdWVyeSguLi5nZXRDbGllbnRBcmdzKHBhdGhBbmRJbnB1dCwgb3B0cykpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVRdWVyaWVzOiB1c2VDYWxsYmFjaygocXVlcnlLZXksIGZpbHRlcnMsIG9wdGlvbnMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5maWx0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IGdldEFycmF5UXVlcnlLZXkocXVlcnlLZXksICdhbnknKVxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgcmVzZXRRdWVyaWVzOiB1c2VDYWxsYmFjaygoLi4uYXJncyk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3F1ZXJ5S2V5LCBmaWx0ZXJzLCBvcHRpb25zXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5yZXNldFF1ZXJpZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5OiBnZXRBcnJheVF1ZXJ5S2V5KHF1ZXJ5S2V5LCAnYW55JylcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIHJlZmV0Y2hRdWVyaWVzOiB1c2VDYWxsYmFjaygoLi4uYXJncyk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3F1ZXJ5S2V5LCBmaWx0ZXJzLCBvcHRpb25zXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5yZWZldGNoUXVlcmllcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5maWx0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IGdldEFycmF5UXVlcnlLZXkocXVlcnlLZXksICdhbnknKVxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgY2FuY2VsUXVlcnk6IHVzZUNhbGxiYWNrKChwYXRoQW5kSW5wdXQpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5jYW5jZWxRdWVyaWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5S2V5OiBnZXRBcnJheVF1ZXJ5S2V5KHBhdGhBbmRJbnB1dCwgJ2FueScpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBzZXRRdWVyeURhdGE6IHVzZUNhbGxiYWNrKCguLi5hcmdzKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbcXVlcnlLZXksIC4uLnJlc3RdID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShnZXRBcnJheVF1ZXJ5S2V5KHF1ZXJ5S2V5LCAncXVlcnknKSwgLi4ucmVzdCk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGdldFF1ZXJ5RGF0YTogdXNlQ2FsbGJhY2soKC4uLmFyZ3MpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtxdWVyeUtleSwgLi4ucmVzdF0gPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuZ2V0UXVlcnlEYXRhKGdldEFycmF5UXVlcnlLZXkocXVlcnlLZXksICdxdWVyeScpLCAuLi5yZXN0KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50XG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgc2V0SW5maW5pdGVRdWVyeURhdGE6IHVzZUNhbGxiYWNrKCguLi5hcmdzKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbcXVlcnlLZXksIC4uLnJlc3RdID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShnZXRBcnJheVF1ZXJ5S2V5KHF1ZXJ5S2V5LCAnaW5maW5pdGUnKSwgLi4ucmVzdCk7XG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIGdldEluZmluaXRlUXVlcnlEYXRhOiB1c2VDYWxsYmFjaygoLi4uYXJncyk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3F1ZXJ5S2V5LCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeUNsaWVudC5nZXRRdWVyeURhdGEoZ2V0QXJyYXlRdWVyeUtleShxdWVyeUtleSwgJ2luZmluaXRlJyksIC4uLnJlc3QpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlDbGllbnRcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBwcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiB1c2VDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChDb250ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEhhY2sgdG8gbWFrZSBzdXJlIGVycm9ycyByZXR1cm4gYHN0YXR1c2A9J2Vycm9yYCB3aGVuIGRvaW5nIFNTUlxuICAgKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vdHJwYy90cnBjL3B1bGwvMTY0NVxuICAgKi8gZnVuY3Rpb24gdXNlU1NSUXVlcnlPcHRpb25zSWZOZWVkZWQocGF0aEFuZElucHV0LCB0eXBlLCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHsgcXVlcnlDbGllbnQgLCBzc3JTdGF0ZSAgfSA9IHVzZUNvbnRleHQoKTtcbiAgICAgICAgcmV0dXJuIHNzclN0YXRlICYmIHNzclN0YXRlICE9PSAnbW91bnRlZCcgJiYgcXVlcnlDbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmZpbmQoZ2V0QXJyYXlRdWVyeUtleShwYXRoQW5kSW5wdXQsIHR5cGUpKT8uc3RhdGUuc3RhdHVzID09PSAnZXJyb3InID8ge1xuICAgICAgICAgICAgcmV0cnlPbk1vdW50OiBmYWxzZSxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfSA6IG9wdHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVzZVF1ZXJ5JDEoLy8gRklYTUUgcGF0aCBzaG91bGQgYmUgYSB0dXBsZSBpbiBuZXh0IG1ham9yXG4gICAgcGF0aEFuZElucHV0LCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KCk7XG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmV0cmlldmUgYXBwbGljYXRpb24gY29udGV4dC4gRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIEFwcCBpbnNpZGUgYHdpdGhUUlBDYCBIb0M/Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBhYm9ydE9uVW5tb3VudCAsIGNsaWVudCAsIHNzclN0YXRlICwgcXVlcnlDbGllbnQgLCBwcmVmZXRjaFF1ZXJ5ICB9ID0gY29udGV4dDtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdHMgPSBxdWVyeUNsaWVudC5nZXRRdWVyeURlZmF1bHRzKGdldEFycmF5UXVlcnlLZXkocGF0aEFuZElucHV0LCAncXVlcnknKSk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiBzc3JTdGF0ZSA9PT0gJ3ByZXBhc3MnICYmIG9wdHM/LnRycGM/LnNzciAhPT0gZmFsc2UgJiYgKG9wdHM/LmVuYWJsZWQgPz8gZGVmYXVsdE9wdHM/LmVuYWJsZWQpICE9PSBmYWxzZSAmJiAhcXVlcnlDbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmZpbmQoZ2V0QXJyYXlRdWVyeUtleShwYXRoQW5kSW5wdXQsICdxdWVyeScpKSkge1xuICAgICAgICAgICAgdm9pZCBwcmVmZXRjaFF1ZXJ5KHBhdGhBbmRJbnB1dCwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3NyT3B0cyA9IHVzZVNTUlF1ZXJ5T3B0aW9uc0lmTmVlZGVkKHBhdGhBbmRJbnB1dCwgJ3F1ZXJ5Jywge1xuICAgICAgICAgICAgLi4uZGVmYXVsdE9wdHMsXG4gICAgICAgICAgICAuLi5vcHRzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzaG91bGRBYm9ydE9uVW5tb3VudCA9IG9wdHM/LnRycGM/LmFib3J0T25Vbm1vdW50ID8/IGNvbmZpZz8uYWJvcnRPblVubW91bnQgPz8gYWJvcnRPblVubW91bnQ7XG4gICAgICAgIGNvbnN0IGhvb2sgPSB1c2VRdWVyeSh7XG4gICAgICAgICAgICAuLi5zc3JPcHRzLFxuICAgICAgICAgICAgcXVlcnlLZXk6IGdldEFycmF5UXVlcnlLZXkocGF0aEFuZElucHV0LCAncXVlcnknKSxcbiAgICAgICAgICAgIHF1ZXJ5Rm46IChxdWVyeUZ1bmN0aW9uQ29udGV4dCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxPcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5zc3JPcHRzLFxuICAgICAgICAgICAgICAgICAgICB0cnBjOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zc3JPcHRzPy50cnBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc2hvdWxkQWJvcnRPblVubW91bnQgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBxdWVyeUZ1bmN0aW9uQ29udGV4dC5zaWduYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LnF1ZXJ5KC4uLmdldENsaWVudEFyZ3MocGF0aEFuZElucHV0LCBhY3R1YWxPcHRzKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGV4dDogUmVhY3RRdWVyeUNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIGhvb2sudHJwYyA9IHVzZUhvb2tSZXN1bHQoe1xuICAgICAgICAgICAgcGF0aDogcGF0aEFuZElucHV0WzBdXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaG9vaztcbiAgICB9XG4gICAgZnVuY3Rpb24gdXNlTXV0YXRpb24kMSgvLyBGSVhNRTogdGhpcyBzaG91bGQgb25seSBiZSBhIHR1cGxlIHBhdGggaW4gbmV4dCBtYWpvclxuICAgIHBhdGgsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgeyBjbGllbnQgIH0gPSB1c2VDb250ZXh0KCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoe1xuICAgICAgICAgICAgY29udGV4dDogUmVhY3RRdWVyeUNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFjdHVhbFBhdGggPSBBcnJheS5pc0FycmF5KHBhdGgpID8gcGF0aFswXSA6IHBhdGg7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRzID0gcXVlcnlDbGllbnQuZ2V0TXV0YXRpb25EZWZhdWx0cyhbXG4gICAgICAgICAgICBhY3R1YWxQYXRoLnNwbGl0KCcuJylcbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGhvb2sgPSB1c2VNdXRhdGlvbih7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgbXV0YXRpb25LZXk6IFtcbiAgICAgICAgICAgICAgICBhY3R1YWxQYXRoLnNwbGl0KCcuJylcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtdXRhdGlvbkZuOiAoaW5wdXQpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5tdXRhdGlvbiguLi5nZXRDbGllbnRBcmdzKFtcbiAgICAgICAgICAgICAgICAgICAgYWN0dWFsUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgICAgICBdLCBvcHRzKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGV4dDogUmVhY3RRdWVyeUNvbnRleHQsXG4gICAgICAgICAgICBvblN1Y2Nlc3MgKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbEZuID0gKCk9Pm9wdHM/Lm9uU3VjY2Vzcz8uKC4uLmFyZ3MpID8/IGRlZmF1bHRPcHRzPy5vblN1Y2Nlc3M/LiguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbXV0YXRpb25TdWNjZXNzT3ZlcnJpZGUoe1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEZuLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogb3B0cz8ubWV0YSA/PyBkZWZhdWx0T3B0cz8ubWV0YSA/PyB7fVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaG9vay50cnBjID0gdXNlSG9va1Jlc3VsdCh7XG4gICAgICAgICAgICBwYXRoOiBhY3R1YWxQYXRoXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaG9vaztcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLS0gQHByZXNlcnZlICovIGZ1bmN0aW9uIHVzZVN1YnNjcmlwdGlvbihwYXRoQW5kSW5wdXQsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgZW5hYmxlZCA9IG9wdHM/LmVuYWJsZWQgPz8gdHJ1ZTtcbiAgICAgICAgY29uc3QgcXVlcnlLZXkgPSBoYXNoUXVlcnlLZXkocGF0aEFuZElucHV0KTtcbiAgICAgICAgY29uc3QgeyBjbGllbnQgIH0gPSB1c2VDb250ZXh0KCk7XG4gICAgICAgIGNvbnN0IG9wdHNSZWYgPSB1c2VSZWYob3B0cyk7XG4gICAgICAgIG9wdHNSZWYuY3VycmVudCA9IG9wdHM7XG4gICAgICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICAgICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgW3BhdGgsIGlucHV0XSA9IHBhdGhBbmRJbnB1dDtcbiAgICAgICAgICAgIGxldCBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNsaWVudC5zdWJzY3JpcHRpb24ocGF0aCwgaW5wdXQgPz8gdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgb25TdGFydGVkOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0c1JlZi5jdXJyZW50Lm9uU3RhcnRlZD8uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRGF0YTogKGRhdGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRSB0aGlzIHNob3VsZG4ndCBiZSBuZWVkZWQgYXMgYm90aCBzaG91bGQgYmUgYHVua25vd25gIGluIG5leHQgbWFqb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHNSZWYuY3VycmVudC5vbkRhdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6IChlcnIpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzUmVmLmN1cnJlbnQub25FcnJvcj8uKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgICAgIH0sIFtcbiAgICAgICAgICAgIHF1ZXJ5S2V5LFxuICAgICAgICAgICAgZW5hYmxlZFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXNlSW5maW5pdGVRdWVyeSQxKHBhdGhBbmRJbnB1dCwgb3B0cykge1xuICAgICAgICBjb25zdCBbcGF0aCwgaW5wdXRdID0gcGF0aEFuZElucHV0O1xuICAgICAgICBjb25zdCB7IGNsaWVudCAsIHNzclN0YXRlICwgcHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5ICwgcXVlcnlDbGllbnQgLCBhYm9ydE9uVW5tb3VudCAsICB9ID0gdXNlQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0cyA9IHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGVmYXVsdHMoZ2V0QXJyYXlRdWVyeUtleShwYXRoQW5kSW5wdXQsICdpbmZpbml0ZScpKTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmIHNzclN0YXRlID09PSAncHJlcGFzcycgJiYgb3B0cz8udHJwYz8uc3NyICE9PSBmYWxzZSAmJiAob3B0cz8uZW5hYmxlZCA/PyBkZWZhdWx0T3B0cz8uZW5hYmxlZCkgIT09IGZhbHNlICYmICFxdWVyeUNsaWVudC5nZXRRdWVyeUNhY2hlKCkuZmluZChnZXRBcnJheVF1ZXJ5S2V5KHBhdGhBbmRJbnB1dCwgJ2luZmluaXRlJykpKSB7XG4gICAgICAgICAgICB2b2lkIHByZWZldGNoSW5maW5pdGVRdWVyeShwYXRoQW5kSW5wdXQsIHtcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0T3B0cyxcbiAgICAgICAgICAgICAgICAuLi5vcHRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzc3JPcHRzID0gdXNlU1NSUXVlcnlPcHRpb25zSWZOZWVkZWQocGF0aEFuZElucHV0LCAnaW5maW5pdGUnLCB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0T3B0cyxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHJlcXVlc3Qgb3B0aW9uIHNob3VsZCB0YWtlIHByaW9yaXR5IG92ZXIgZ2xvYmFsXG4gICAgICAgIGNvbnN0IHNob3VsZEFib3J0T25Vbm1vdW50ID0gb3B0cz8udHJwYz8uYWJvcnRPblVubW91bnQgPz8gYWJvcnRPblVubW91bnQ7XG4gICAgICAgIGNvbnN0IGhvb2sgPSB1c2VJbmZpbml0ZVF1ZXJ5KHtcbiAgICAgICAgICAgIC4uLnNzck9wdHMsXG4gICAgICAgICAgICBxdWVyeUtleTogZ2V0QXJyYXlRdWVyeUtleShwYXRoQW5kSW5wdXQsICdpbmZpbml0ZScpLFxuICAgICAgICAgICAgcXVlcnlGbjogKHF1ZXJ5RnVuY3Rpb25Db250ZXh0KT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnNzck9wdHMsXG4gICAgICAgICAgICAgICAgICAgIHRycGM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnNzck9wdHM/LnRycGMsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zaG91bGRBYm9ydE9uVW5tb3VudCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IHF1ZXJ5RnVuY3Rpb25Db250ZXh0LnNpZ25hbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbElucHV0ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5pbnB1dCA/PyB7fSxcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBxdWVyeUZ1bmN0aW9uQ29udGV4dC5wYWdlUGFyYW0gPz8gb3B0cz8uaW5pdGlhbEN1cnNvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gRklYTUUgYXMgYW55IHNob3VsZG4ndCBiZSBuZWVkZWQgYXMgY2xpZW50IHNob3VsZCBiZSB1bnR5cGVkIHRvb1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQucXVlcnkoLi4uZ2V0Q2xpZW50QXJncyhbXG4gICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbElucHV0XG4gICAgICAgICAgICAgICAgXSwgYWN0dWFsT3B0cykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRleHQ6IFJlYWN0UXVlcnlDb250ZXh0XG4gICAgICAgIH0pO1xuICAgICAgICBob29rLnRycGMgPSB1c2VIb29rUmVzdWx0KHtcbiAgICAgICAgICAgIHBhdGhcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBob29rO1xuICAgIH1cbiAgICBjb25zdCB1c2VRdWVyaWVzJDEgPSAocXVlcmllc0NhbGxiYWNrLCBjb250ZXh0KT0+e1xuICAgICAgICBjb25zdCB7IHNzclN0YXRlICwgcXVlcnlDbGllbnQgLCBwcmVmZXRjaFF1ZXJ5ICwgY2xpZW50ICB9ID0gdXNlQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBwcm94eSA9IGNyZWF0ZVVzZVF1ZXJpZXNQcm94eShjbGllbnQpO1xuICAgICAgICBjb25zdCBxdWVyaWVzID0gcXVlcmllc0NhbGxiYWNrKHByb3h5KTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmIHNzclN0YXRlID09PSAncHJlcGFzcycpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcXVlcnkgb2YgcXVlcmllcyl7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVlcnlPcHRpb24gPSBxdWVyeTtcbiAgICAgICAgICAgICAgICBpZiAocXVlcnlPcHRpb24udHJwYz8uc3NyICE9PSBmYWxzZSAmJiAhcXVlcnlDbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmZpbmQoZ2V0QXJyYXlRdWVyeUtleShxdWVyeU9wdGlvbi5xdWVyeUtleSwgJ3F1ZXJ5JykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgcHJlZmV0Y2hRdWVyeShxdWVyeU9wdGlvbi5xdWVyeUtleSwgcXVlcnlPcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXNlUXVlcmllcyh7XG4gICAgICAgICAgICBxdWVyaWVzOiBxdWVyaWVzLm1hcCgocXVlcnkpPT4oe1xuICAgICAgICAgICAgICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlLZXk6IGdldEFycmF5UXVlcnlLZXkocXVlcnkucXVlcnlLZXksICdxdWVyeScpXG4gICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHVzZURlaHlkcmF0ZWRTdGF0ZSA9IChjbGllbnQsIHRycGNTdGF0ZSk9PntcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB1c2VNZW1vKCgpPT57XG4gICAgICAgICAgICBpZiAoIXRycGNTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnBjU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50LnJ1bnRpbWUudHJhbnNmb3JtZXIuZGVzZXJpYWxpemUodHJwY1N0YXRlKTtcbiAgICAgICAgfSwgW1xuICAgICAgICAgICAgdHJwY1N0YXRlLFxuICAgICAgICAgICAgY2xpZW50XG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBQcm92aWRlcjogVFJQQ1Byb3ZpZGVyLFxuICAgICAgICBjcmVhdGVDbGllbnQsXG4gICAgICAgIHVzZUNvbnRleHQsXG4gICAgICAgIHVzZVV0aWxzOiB1c2VDb250ZXh0LFxuICAgICAgICB1c2VRdWVyeTogdXNlUXVlcnkkMSxcbiAgICAgICAgdXNlUXVlcmllczogdXNlUXVlcmllcyQxLFxuICAgICAgICB1c2VNdXRhdGlvbjogdXNlTXV0YXRpb24kMSxcbiAgICAgICAgdXNlU3Vic2NyaXB0aW9uLFxuICAgICAgICB1c2VEZWh5ZHJhdGVkU3RhdGUsXG4gICAgICAgIHVzZUluZmluaXRlUXVlcnk6IHVzZUluZmluaXRlUXVlcnkkMVxuICAgIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIHN0cm9uZ2x5IHR5cGVkIHJlYWN0IGhvb2tzXG4gKiBAaW50ZXJuYWxcbiAqIEBkZXByZWNhdGVkXG4gKi8gZnVuY3Rpb24gY3JlYXRlSG9va3NJbnRlcm5hbChjb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlUm9vdEhvb2tzKGNvbmZpZyk7XG59XG5cbmV4cG9ydCB7IFRSUENDb250ZXh0IGFzIFQsIGNyZWF0ZVJlYWN0UXVlcnlVdGlsc1Byb3h5IGFzIGEsIGNyZWF0ZVJlYWN0UHJveHlEZWNvcmF0aW9uIGFzIGIsIGNyZWF0ZUhvb2tzSW50ZXJuYWwgYXMgYywgZ2V0Q2xpZW50QXJncyBhcyBkLCBjcmVhdGVVc2VRdWVyaWVzUHJveHkgYXMgZSwgY3JlYXRlUm9vdEhvb2tzIGFzIGYsIGdldFF1ZXJ5S2V5IGFzIGcsIGNvbnRleHRQcm9wcyBhcyBoIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getArrayQueryKey)\n/* harmony export */ });\n/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/ function getArrayQueryKey(queryKey, type) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [\n        queryKey\n    ];\n    const [path, input] = queryKeyArrayed;\n    const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    if (!input && (!type || type === 'any')) // for `utils.invalidate()` to match all queries (including vanilla react-query)\n    // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [\n        arrayPath\n    ] : [];\n    return [\n        arrayPath,\n        {\n            ...typeof input !== 'undefined' && {\n                input: input\n            },\n            ...type && type !== 'any' && {\n                type: type\n            }\n        }\n    ];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9nZXRBcnJheVF1ZXJ5S2V5LTg2MTM0ZjhiLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvZ2V0QXJyYXlRdWVyeUtleS04NjEzNGY4Yi5tanM/NGM4NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRvIGFsbG93IGVhc3kgaW50ZXJhY3Rpb25zIHdpdGggZ3JvdXBzIG9mIHJlbGF0ZWQgcXVlcmllcywgc3VjaCBhc1xuICogaW52YWxpZGF0aW5nIGFsbCBxdWVyaWVzIG9mIGEgcm91dGVyLCB3ZSB1c2UgYW4gYXJyYXkgYXMgdGhlIHBhdGggd2hlblxuICogc3RvcmluZyBpbiB0YW5zdGFjayBxdWVyeS4gVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBmcm9tIHRoZSBgLmAgc2VwYXJhdGVkXG4gKiBwYXRoIHBhc3NlZCBhcm91bmQgaW50ZXJuYWxseSBieSBib3RoIHRoZSBsZWdhY3kgYW5kIHByb3h5IGltcGxlbWVudGF0aW9uLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3RycGMvdHJwYy9pc3N1ZXMvMjYxMVxuICoqLyBmdW5jdGlvbiBnZXRBcnJheVF1ZXJ5S2V5KHF1ZXJ5S2V5LCB0eXBlKSB7XG4gICAgY29uc3QgcXVlcnlLZXlBcnJheWVkID0gQXJyYXkuaXNBcnJheShxdWVyeUtleSkgPyBxdWVyeUtleSA6IFtcbiAgICAgICAgcXVlcnlLZXlcbiAgICBdO1xuICAgIGNvbnN0IFtwYXRoLCBpbnB1dF0gPSBxdWVyeUtleUFycmF5ZWQ7XG4gICAgY29uc3QgYXJyYXlQYXRoID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnIHx8IHBhdGggPT09ICcnID8gW10gOiBwYXRoLnNwbGl0KCcuJyk7XG4gICAgLy8gQ29uc3RydWN0IGEgcXVlcnkga2V5IHRoYXQgaXMgZWFzeSB0byBkZXN0cnVjdHVyZSBhbmQgZmxleGlibGUgZm9yXG4gICAgLy8gcGFydGlhbCBzZWxlY3RpbmcgZXRjLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90cnBjL3RycGMvaXNzdWVzLzMxMjhcbiAgICBpZiAoIWlucHV0ICYmICghdHlwZSB8fCB0eXBlID09PSAnYW55JykpIC8vIGZvciBgdXRpbHMuaW52YWxpZGF0ZSgpYCB0byBtYXRjaCBhbGwgcXVlcmllcyAoaW5jbHVkaW5nIHZhbmlsbGEgcmVhY3QtcXVlcnkpXG4gICAgLy8gd2UgZG9uJ3Qgd2FudCBuZXN0ZWQgYXJyYXkgaWYgcGF0aCBpcyBlbXB0eSwgaS5lLiBgW11gIGluc3RlYWQgb2YgYFtbXV1gXG4gICAgcmV0dXJuIGFycmF5UGF0aC5sZW5ndGggPyBbXG4gICAgICAgIGFycmF5UGF0aFxuICAgIF0gOiBbXTtcbiAgICByZXR1cm4gW1xuICAgICAgICBhcnJheVBhdGgsXG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLnR5cGVvZiBpbnB1dCAhPT0gJ3VuZGVmaW5lZCcgJiYge1xuICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLnR5cGUgJiYgdHlwZSAhPT0gJ2FueScgJiYge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF07XG59XG5cbmV4cG9ydCB7IGdldEFycmF5UXVlcnlLZXkgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/react-query/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@trpc/react-query/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.clientCallTypeToProcedureType),\n/* harmony export */   createReactQueryHooks: () => (/* binding */ createReactQueryHooks),\n/* harmony export */   createTRPCClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCProxyClient),\n/* harmony export */   createTRPCReact: () => (/* binding */ createTRPCReact),\n/* harmony export */   createTRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getFetch),\n/* harmony export */   getQueryKey: () => (/* reexport safe */ _createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   getUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/./node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHooksInternal-bdff7171.mjs */ \"(ssr)/./node_modules/@trpc/react-query/dist/createHooksInternal-bdff7171.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/shared */ \"(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/./node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n\n\n\n\n\n\n\n\n/**\n * @internal\n */ function createHooksInternalProxy(trpc) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__.createFlatProxy)((key)=>{\n        if (key === 'useContext' || key === 'useUtils') {\n            return ()=>{\n                const context = trpc.useUtils();\n                // create a stable reference of the utils context\n                return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n                    return (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(context);\n                }, [\n                    context\n                ]);\n            };\n        }\n        if (trpc.hasOwnProperty(key)) {\n            return trpc[key];\n        }\n        return (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(key, trpc);\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(hooks);\n    return proxy;\n}\n\n// interop:\n/**\n * @deprecated use `createTRPCReact` instead\n */ function createReactQueryHooks(opts) {\n    const trpc = (0,_createHooksInternal_bdff7171_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(trpc);\n    return {\n        ...trpc,\n        proxy\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvcmVhY3QtcXVlcnkvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDbUg7QUFDMUU7QUFDaEI7QUFDdEI7QUFDRDtBQUNVOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLG9FQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhDQUFPO0FBQzlCLDJCQUEyQixvRUFBMEI7QUFDckQsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvRUFBMEI7QUFDekMsS0FBSztBQUNMO0FBQ0E7QUFDQSxrQkFBa0Isb0VBQW1CO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvRUFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvaW5kZXgubWpzPzMzMjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnQHRycGMvY2xpZW50JztcbmltcG9ydCB7IGMgYXMgY3JlYXRlSG9va3NJbnRlcm5hbCwgYSBhcyBjcmVhdGVSZWFjdFF1ZXJ5VXRpbHNQcm94eSwgYiBhcyBjcmVhdGVSZWFjdFByb3h5RGVjb3JhdGlvbiB9IGZyb20gJy4vY3JlYXRlSG9va3NJbnRlcm5hbC1iZGZmNzE3MS5tanMnO1xuZXhwb3J0IHsgZyBhcyBnZXRRdWVyeUtleSB9IGZyb20gJy4vY3JlYXRlSG9va3NJbnRlcm5hbC1iZGZmNzE3MS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRmxhdFByb3h5IH0gZnJvbSAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0ICcuL2dldEFycmF5UXVlcnlLZXktODYxMzRmOGIubWpzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVIb29rc0ludGVybmFsUHJveHkodHJwYykge1xuICAgIHJldHVybiBjcmVhdGVGbGF0UHJveHkoKGtleSk9PntcbiAgICAgICAgaWYgKGtleSA9PT0gJ3VzZUNvbnRleHQnIHx8IGtleSA9PT0gJ3VzZVV0aWxzJykge1xuICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRycGMudXNlVXRpbHMoKTtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBzdGFibGUgcmVmZXJlbmNlIG9mIHRoZSB1dGlscyBjb250ZXh0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZU1lbW8oKCk9PntcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlYWN0UXVlcnlVdGlsc1Byb3h5KGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJwYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJwY1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVSZWFjdFByb3h5RGVjb3JhdGlvbihrZXksIHRycGMpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVFJQQ1JlYWN0KG9wdHMpIHtcbiAgICBjb25zdCBob29rcyA9IGNyZWF0ZUhvb2tzSW50ZXJuYWwob3B0cyk7XG4gICAgY29uc3QgcHJveHkgPSBjcmVhdGVIb29rc0ludGVybmFsUHJveHkoaG9va3MpO1xuICAgIHJldHVybiBwcm94eTtcbn1cblxuLy8gaW50ZXJvcDpcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBjcmVhdGVUUlBDUmVhY3RgIGluc3RlYWRcbiAqLyBmdW5jdGlvbiBjcmVhdGVSZWFjdFF1ZXJ5SG9va3Mob3B0cykge1xuICAgIGNvbnN0IHRycGMgPSBjcmVhdGVIb29rc0ludGVybmFsKG9wdHMpO1xuICAgIGNvbnN0IHByb3h5ID0gY3JlYXRlSG9va3NJbnRlcm5hbFByb3h5KHRycGMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRycGMsXG4gICAgICAgIHByb3h5XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVhY3RRdWVyeUhvb2tzLCBjcmVhdGVUUlBDUmVhY3QgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/react-query/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVzRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L2NvZGVzLWM5MjRjM2RiLm1qcz84NzEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gaW52ZXJ0KG9iaikge1xuICAgIGNvbnN0IG5ld09iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yKGNvbnN0IGtleSBpbiBvYmope1xuICAgICAgICBjb25zdCB2ID0gb2JqW2tleV07XG4gICAgICAgIG5ld09ialt2XSA9IGtleTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbn1cblxuLy8gcmVmZXJlbmNlOiBodHRwczovL3d3dy5qc29ucnBjLm9yZy9zcGVjaWZpY2F0aW9uXG4vKipcbiAqIEpTT04tUlBDIDIuMCBFcnJvciBjb2Rlc1xuICpcbiAqIGAtMzIwMDBgIHRvIGAtMzIwOTlgIGFyZSByZXNlcnZlZCBmb3IgaW1wbGVtZW50YXRpb24tZGVmaW5lZCBzZXJ2ZXItZXJyb3JzLlxuICogRm9yIHRSUEMgd2UncmUgY29weWluZyB0aGUgbGFzdCBkaWdpdHMgb2YgSFRUUCA0WFggZXJyb3JzLlxuICovIGNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfS0VZID0ge1xuICAgIC8qKlxuICAgKiBJbnZhbGlkIEpTT04gd2FzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICAqIEFuIGVycm9yIG9jY3VycmVkIG9uIHRoZSBzZXJ2ZXIgd2hpbGUgcGFyc2luZyB0aGUgSlNPTiB0ZXh0LlxuICAgKi8gUEFSU0VfRVJST1I6IC0zMjcwMCxcbiAgICAvKipcbiAgICogVGhlIEpTT04gc2VudCBpcyBub3QgYSB2YWxpZCBSZXF1ZXN0IG9iamVjdC5cbiAgICovIEJBRF9SRVFVRVNUOiAtMzI2MDAsXG4gICAgLy8gSW50ZXJuYWwgSlNPTi1SUEMgZXJyb3JcbiAgICBJTlRFUk5BTF9TRVJWRVJfRVJST1I6IC0zMjYwMyxcbiAgICBOT1RfSU1QTEVNRU5URUQ6IC0zMjYwMyxcbiAgICAvLyBJbXBsZW1lbnRhdGlvbiBzcGVjaWZpYyBlcnJvcnNcbiAgICBVTkFVVEhPUklaRUQ6IC0zMjAwMSxcbiAgICBGT1JCSURERU46IC0zMjAwMyxcbiAgICBOT1RfRk9VTkQ6IC0zMjAwNCxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogLTMyMDA1LFxuICAgIFRJTUVPVVQ6IC0zMjAwOCxcbiAgICBDT05GTElDVDogLTMyMDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IC0zMjAxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogLTMyMDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogLTMyMDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiAtMzIwMjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiAtMzIwOTlcbn07XG5jb25zdCBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiA9IGludmVydChUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSk7XG5cbmV4cG9ydCB7IFRSUENfRVJST1JfQ09ERVNfQllfS0VZIGFzIFQsIFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIGFzIGEsIGludmVydCBhcyBpIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if ('error' in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === 'number') {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== 'string' || key === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === 'apply';\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== 'string' || name === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvaW5kZXgtZjkxZDcyMGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpRjs7QUFFakYsbUNBQW1DLHNEQUFNLENBQUMsa0RBQXVCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRXFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVyb0dyb3cvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvaW5kZXgtZjkxZDcyMGMubWpzPzEzNjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaSBhcyBpbnZlcnQsIFQgYXMgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgfSBmcm9tICcuL2NvZGVzLWM5MjRjM2RiLm1qcyc7XG5cbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcbmNvbnN0IEpTT05SUEMyX1RPX0hUVFBfQ09ERSA9IHtcbiAgICBQQVJTRV9FUlJPUjogNDAwLFxuICAgIEJBRF9SRVFVRVNUOiA0MDAsXG4gICAgVU5BVVRIT1JJWkVEOiA0MDEsXG4gICAgTk9UX0ZPVU5EOiA0MDQsXG4gICAgRk9SQklEREVOOiA0MDMsXG4gICAgTUVUSE9EX05PVF9TVVBQT1JURUQ6IDQwNSxcbiAgICBUSU1FT1VUOiA0MDgsXG4gICAgQ09ORkxJQ1Q6IDQwOSxcbiAgICBQUkVDT05ESVRJT05fRkFJTEVEOiA0MTIsXG4gICAgUEFZTE9BRF9UT09fTEFSR0U6IDQxMyxcbiAgICBVTlBST0NFU1NBQkxFX0NPTlRFTlQ6IDQyMixcbiAgICBUT09fTUFOWV9SRVFVRVNUUzogNDI5LFxuICAgIENMSUVOVF9DTE9TRURfUkVRVUVTVDogNDk5LFxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogNTAwLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogNTAxXG59O1xuZnVuY3Rpb24gZ2V0U3RhdHVzQ29kZUZyb21LZXkoY29kZSkge1xuICAgIHJldHVybiBKU09OUlBDMl9UT19IVFRQX0NPREVbY29kZV0gPz8gNTAwO1xufVxuZnVuY3Rpb24gZ2V0SFRUUFN0YXR1c0NvZGUoanNvbikge1xuICAgIGNvbnN0IGFyciA9IEFycmF5LmlzQXJyYXkoanNvbikgPyBqc29uIDogW1xuICAgICAgICBqc29uXG4gICAgXTtcbiAgICBjb25zdCBodHRwU3RhdHVzZXMgPSBuZXcgU2V0KGFyci5tYXAoKHJlcyk9PntcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzLmVycm9yLmRhdGE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuaHR0cFN0YXR1cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5odHRwU3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29kZSA9IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSW3Jlcy5lcnJvci5jb2RlXTtcbiAgICAgICAgICAgIHJldHVybiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMjAwO1xuICAgIH0pKTtcbiAgICBpZiAoaHR0cFN0YXR1c2VzLnNpemUgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuIDIwNztcbiAgICB9XG4gICAgY29uc3QgaHR0cFN0YXR1cyA9IGh0dHBTdGF0dXNlcy52YWx1ZXMoKS5uZXh0KCkudmFsdWU7XG4gICAgcmV0dXJuIGh0dHBTdGF0dXM7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiBnZXRTdGF0dXNDb2RlRnJvbUtleShlcnJvci5jb2RlKTtcbn1cblxuY29uc3Qgbm9vcCA9ICgpPT57XG4vLyBub29wXG59O1xuZnVuY3Rpb24gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgcGF0aCkge1xuICAgIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJyB8fCBrZXkgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUlubmVyUHJveHkoY2FsbGJhY2ssIFtcbiAgICAgICAgICAgICAgICAuLi5wYXRoLFxuICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5IChfMSwgXzIsIGFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzQXBwbHkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV0gPT09ICdhcHBseSc7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgIGFyZ3M6IGlzQXBwbHkgPyBhcmdzLmxlbmd0aCA+PSAyID8gYXJnc1sxXSA6IFtdIDogYXJncyxcbiAgICAgICAgICAgICAgICBwYXRoOiBpc0FwcGx5ID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcm94eTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHByb3h5IHRoYXQgY2FsbHMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHBhdGggYW5kIGFyZ3VtZW50c1xuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZVJlY3Vyc2l2ZVByb3h5ID0gKGNhbGxiYWNrKT0+Y3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW10pO1xuLyoqXG4gKiBVc2VkIGluIHBsYWNlIG9mIGBuZXcgUHJveHlgIHdoZXJlIGVhY2ggaGFuZGxlciB3aWxsIG1hcCAxIGxldmVsIGRlZXAgdG8gYW5vdGhlciB2YWx1ZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqLyBjb25zdCBjcmVhdGVGbGF0UHJveHkgPSAoY2FsbGJhY2spPT57XG4gICAgcmV0dXJuIG5ldyBQcm94eShub29wLCB7XG4gICAgICAgIGdldCAoX29iaiwgbmFtZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lID09PSAndGhlbicpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGlmIHRoZSBwcm94eSBpcyBhY2NpZGVudGFsbHkgdHJlYXRlZFxuICAgICAgICAgICAgICAgIC8vIGxpa2UgYSBQcm9taXNlTGlrZSAobGlrZSBpbiBgUHJvbWlzZS5yZXNvbHZlKHByb3h5KWApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuYW1lKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgVCwgY3JlYXRlUmVjdXJzaXZlUHJveHkgYXMgYSwgZ2V0SFRUUFN0YXR1c0NvZGUgYXMgYiwgY3JlYXRlRmxhdFByb3h5IGFzIGMsIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/observable-ade1bad8.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/observable-ade1bad8.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObservable),\n/* harmony export */   o: () => (/* binding */ observable)\n/* harmony export */ });\nfunction identity(x) {\n    return x;\n}\n\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\n\nfunction isObservable(x) {\n    return typeof x === 'object' && x !== null && 'subscribe' in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === 'function') {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3Qvb2JzZXJ2YWJsZS1hZGUxYmFkOC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUtYWRlMWJhZDgubWpzP2NhYjgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuXG4vKiogQGludGVybmFsICovIGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoKHByZXYsIGZuKT0+Zm4ocHJldiksIGlucHV0KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpc09ic2VydmFibGUoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCAmJiAnc3Vic2NyaWJlJyBpbiB4O1xufVxuZnVuY3Rpb24gb2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICBjb25zdCBzZWxmID0ge1xuICAgICAgICBzdWJzY3JpYmUgKG9ic2VydmVyKSB7XG4gICAgICAgICAgICBsZXQgdGVhcmRvd25SZWYgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGlzRG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHVuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHRlYXJkb3duSW1tZWRpYXRlbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93blJlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bkltbWVkaWF0ZWx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodW5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRlYXJkb3duUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duUmVmKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZWFyZG93blJlZikge1xuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93blJlZi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlYXJkb3duUmVmID0gc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dD8uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yPy4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0ZWFyZG93bkltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHBpcGUgKC4uLm9wZXJhdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHNlbGYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZjtcbn1cblxuZXhwb3J0IHsgaXNPYnNlcnZhYmxlIGFzIGksIG9ic2VydmFibGUgYXMgbyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/observable-ade1bad8.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/observable/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   observable: () => (/* reexport safe */ _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_ade1bad8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable-ade1bad8.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/observable-ade1bad8.mjs\");\n\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\n\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\n\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\n\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'ObservableAbortError';\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError('This operation was aborted.'));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3Qvb2JzZXJ2YWJsZS9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFnRjs7QUFFaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L29ic2VydmFibGUvaW5kZXgubWpzPzdhNjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgaSBhcyBpc09ic2VydmFibGUsIG8gYXMgb2JzZXJ2YWJsZSB9IGZyb20gJy4uL29ic2VydmFibGUtYWRlMWJhZDgubWpzJztcblxuZnVuY3Rpb24gc2hhcmUoX29wdHMpIHtcbiAgICByZXR1cm4gKG9yaWdpbmFsT2JzZXJ2ZXIpPT57XG4gICAgICAgIGxldCByZWZDb3VudCA9IDA7XG4gICAgICAgIGxldCBzdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICBjb25zdCBvYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgZnVuY3Rpb24gc3RhcnRJZk5lZWRlZCgpIHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBvcmlnaW5hbE9ic2VydmVyLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgbmV4dCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiBvYnNlcnZlcnMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dD8uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3IgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2Ygb2JzZXJ2ZXJzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yPy4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2Ygb2JzZXJ2ZXJzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0SWZOZWVkZWQoKSB7XG4gICAgICAgICAgICAvLyBcInJlc2V0T25SZWZDb3VudFplcm9cIlxuICAgICAgICAgICAgaWYgKHJlZkNvdW50ID09PSAwICYmIHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9zdWIgPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1YnNjcmliZSAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICByZWZDb3VudCsrO1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgICAgICAgICAgICBzdGFydElmTmVlZGVkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUgKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0SWZOZWVkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gb2JzZXJ2ZXJzLmZpbmRJbmRleCgodik9PnYgPT09IG9ic2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIG1hcChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIChvcmlnaW5hbE9ic2VydmVyKT0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlIChvYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb3JpZ2luYWxPYnNlcnZlci5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgICAgICBuZXh0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dD8uKHByb2plY3QodmFsdWUsIGluZGV4KyspKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcj8uKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGU/LigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB0YXAob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gKG9yaWdpbmFsT2JzZXJ2ZXIpPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWJzY3JpYmUgKG9ic2VydmVyMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE9ic2VydmVyLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQ/Lih2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyMi5uZXh0Py4odik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcj8uKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIyLmVycm9yPy4odik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyMi5jb21wbGV0ZT8uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5jbGFzcyBPYnNlcnZhYmxlQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKXtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYnNlcnZhYmxlQWJvcnRFcnJvcic7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBPYnNlcnZhYmxlQWJvcnRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gb2JzZXJ2YWJsZVRvUHJvbWlzZShvYnNlcnZhYmxlKSB7XG4gICAgbGV0IGFib3J0O1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICBsZXQgaXNEb25lID0gZmFsc2U7XG4gICAgICAgIGZ1bmN0aW9uIG9uRG9uZSgpIHtcbiAgICAgICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBPYnNlcnZhYmxlQWJvcnRFcnJvcignVGhpcyBvcGVyYXRpb24gd2FzIGFib3J0ZWQuJykpO1xuICAgICAgICAgICAgb2JzJC51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9icyQgPSBvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0IChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaXNEb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIG9uRG9uZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaXNEb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgb25Eb25lKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGxldGUgKCkge1xuICAgICAgICAgICAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgb25Eb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhYm9ydCA9IG9uRG9uZTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBhYm9ydDogYWJvcnRcbiAgICB9O1xufVxuXG5leHBvcnQgeyBtYXAsIG9ic2VydmFibGVUb1Byb21pc2UsIHNoYXJlLCB0YXAgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/observable/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/shared/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFlatProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createRecursiveProxy: () => (/* reexport safe */ _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   getErrorShape: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   transformTRPCResponse: () => (/* reexport safe */ _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__.t)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index-f91d720c.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformTRPCResponse-1153b421.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codes-c924c3db.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3Qvc2hhcmVkL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdGO0FBQ2U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZXJvR3Jvdy8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9zaGFyZWQvaW5kZXgubWpzP2MzMDAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgYyBhcyBjcmVhdGVGbGF0UHJveHksIGEgYXMgY3JlYXRlUmVjdXJzaXZlUHJveHkgfSBmcm9tICcuLi9pbmRleC1mOTFkNzIwYy5tanMnO1xuZXhwb3J0IHsgZyBhcyBnZXRFcnJvclNoYXBlLCB0IGFzIHRyYW5zZm9ybVRSUENSZXNwb25zZSB9IGZyb20gJy4uL3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanMnO1xuaW1wb3J0ICcuLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/shared/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(ssr)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path , error , config  } = opts;\n    const { code  } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === 'string') {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === 'string') {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\n\nfunction transformTRPCResponseItem(config, item) {\n    if ('error' in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if ('data' in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVFO0FBQ0g7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0EsY0FBYyxrREFBdUI7QUFDckM7QUFDQTtBQUNBLHdCQUF3QixzREFBMEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Flcm9Hcm93Ly4vbm9kZV9tb2R1bGVzL0B0cnBjL3NlcnZlci9kaXN0L3RyYW5zZm9ybVRSUENSZXNwb25zZS0xMTUzYjQyMS5tanM/MGQ3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yIH0gZnJvbSAnLi9pbmRleC1mOTFkNzIwYy5tanMnO1xuaW1wb3J0IHsgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBnZXRFcnJvclNoYXBlKG9wdHMpIHtcbiAgICBjb25zdCB7IHBhdGggLCBlcnJvciAsIGNvbmZpZyAgfSA9IG9wdHM7XG4gICAgY29uc3QgeyBjb2RlICB9ID0gb3B0cy5lcnJvcjtcbiAgICBjb25zdCBzaGFwZSA9IHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgY29kZTogVFJQQ19FUlJPUl9DT0RFU19CWV9LRVlbY29kZV0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICBodHRwU3RhdHVzOiBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvcihlcnJvcilcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKGNvbmZpZy5pc0RldiAmJiB0eXBlb2Ygb3B0cy5lcnJvci5zdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2hhcGUuZGF0YS5zdGFjayA9IG9wdHMuZXJyb3Iuc3RhY2s7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2hhcGUuZGF0YS5wYXRoID0gcGF0aDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZy5lcnJvckZvcm1hdHRlcih7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIHNoYXBlXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtKSB7XG4gICAgaWYgKCdlcnJvcicgaW4gaXRlbSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgIGVycm9yOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLmVycm9yKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoJ2RhdGEnIGluIGl0ZW0ucmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgLi4uaXRlbS5yZXN1bHQsXG4gICAgICAgICAgICAgICAgZGF0YTogY29uZmlnLnRyYW5zZm9ybWVyLm91dHB1dC5zZXJpYWxpemUoaXRlbS5yZXN1bHQuZGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59XG4vKipcbiAqIFRha2VzIGEgdW5zZXJpYWxpemVkIGBUUlBDUmVzcG9uc2VgIGFuZCBzZXJpYWxpemVzIGl0IHdpdGggdGhlIHJvdXRlcidzIHRyYW5zZm9ybWVyc1xuICoqLyBmdW5jdGlvbiB0cmFuc2Zvcm1UUlBDUmVzcG9uc2UoY29uZmlnLCBpdGVtT3JJdGVtcykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGl0ZW1Pckl0ZW1zKSA/IGl0ZW1Pckl0ZW1zLm1hcCgoaXRlbSk9PnRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtKSkgOiB0cmFuc2Zvcm1UUlBDUmVzcG9uc2VJdGVtKGNvbmZpZywgaXRlbU9ySXRlbXMpO1xufVxuXG5leHBvcnQgeyBnZXRFcnJvclNoYXBlIGFzIGcsIHRyYW5zZm9ybVRSUENSZXNwb25zZSBhcyB0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCError),\n/* harmony export */   g: () => (/* binding */ getTRPCErrorFromUnknown)\n/* harmony export */ });\n/**\n * @internal\n */ function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) {\n        return cause;\n    }\n    if (cause instanceof Error && cause.name === \"TRPCError\") {\n        // https://github.com/trpc/trpc/pull/4848\n        return cause;\n    }\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    // Inherit stack from error\n    if (cause instanceof Error && cause.stack) {\n        trpcError.stack = cause.stack;\n    }\n    return trpcError;\n}\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== \"object\") {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\nclass TRPCError extends Error {\n    constructor(opts){\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = opts.message ?? cause?.message ?? opts.code;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.code = opts.code;\n        this.name = \"TRPCError\";\n        if (!this.cause) {\n            // idk why this is needed, but it is\n            this.cause = cause;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvVFJQQ0Vycm9yLTY4OWU3OWYxLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBQUcsU0FBU0EsU0FBU0MsS0FBSztJQUN2Qiw2QkFBNkI7SUFDN0IsT0FBTyxDQUFDLENBQUNBLFNBQVMsQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixVQUFVLE9BQU9BLFVBQVU7QUFDaEU7QUFFQSxTQUFTRyx3QkFBd0JDLEtBQUs7SUFDbEMsSUFBSUEsaUJBQWlCQyxXQUFXO1FBQzVCLE9BQU9EO0lBQ1g7SUFDQSxJQUFJQSxpQkFBaUJFLFNBQVNGLE1BQU1HLElBQUksS0FBSyxhQUFhO1FBQ3RELHlDQUF5QztRQUN6QyxPQUFPSDtJQUNYO0lBQ0EsTUFBTUksWUFBWSxJQUFJSCxVQUFVO1FBQzVCSSxNQUFNO1FBQ05MO0lBQ0o7SUFDQSwyQkFBMkI7SUFDM0IsSUFBSUEsaUJBQWlCRSxTQUFTRixNQUFNTSxLQUFLLEVBQUU7UUFDdkNGLFVBQVVFLEtBQUssR0FBR04sTUFBTU0sS0FBSztJQUNqQztJQUNBLE9BQU9GO0FBQ1g7QUFDQSxNQUFNRywwQkFBMEJMO0FBQ2hDO0FBQ0EsU0FBU00sb0JBQW9CUixLQUFLO0lBQzlCLElBQUlBLGlCQUFpQkUsT0FBTztRQUN4QixPQUFPRjtJQUNYO0lBQ0EsTUFBTVMsT0FBTyxPQUFPVDtJQUNwQixJQUFJUyxTQUFTLGVBQWVBLFNBQVMsY0FBY1QsVUFBVSxNQUFNO1FBQy9ELE9BQU9VO0lBQ1g7SUFDQSwrQ0FBK0M7SUFDL0MsSUFBSUQsU0FBUyxVQUFVO1FBQ25CLE9BQU8sSUFBSVAsTUFBTVMsT0FBT1g7SUFDNUI7SUFDQSxvREFBb0Q7SUFDcEQsSUFBSUwsU0FBU0ssUUFBUTtRQUNqQixNQUFNWSxNQUFNLElBQUlMO1FBQ2hCLElBQUksTUFBTU0sT0FBT2IsTUFBTTtZQUNuQlksR0FBRyxDQUFDQyxJQUFJLEdBQUdiLEtBQUssQ0FBQ2EsSUFBSTtRQUN6QjtRQUNBLE9BQU9EO0lBQ1g7SUFDQSxPQUFPRjtBQUNYO0FBQ0EsTUFBTVQsa0JBQWtCQztJQUNwQlksWUFBWUMsSUFBSSxDQUFDO1FBQ2IsTUFBTWYsUUFBUVEsb0JBQW9CTyxLQUFLZixLQUFLO1FBQzVDLE1BQU1nQixVQUFVRCxLQUFLQyxPQUFPLElBQUloQixPQUFPZ0IsV0FBV0QsS0FBS1YsSUFBSTtRQUMzRCw2REFBNkQ7UUFDN0QsMERBQTBEO1FBQzFELEtBQUssQ0FBQ1csU0FBUztZQUNYaEI7UUFDSjtRQUNBLElBQUksQ0FBQ0ssSUFBSSxHQUFHVSxLQUFLVixJQUFJO1FBQ3JCLElBQUksQ0FBQ0YsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0gsS0FBSyxFQUFFO1lBQ2Isb0NBQW9DO1lBQ3BDLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtRQUNqQjtJQUNKO0FBQ0o7QUFFd0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZXJvR3Jvdy8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9UUlBDRXJyb3ItNjg5ZTc5ZjEubWpzP2UxNmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbmZ1bmN0aW9uIGdldFRSUENFcnJvckZyb21Vbmtub3duKGNhdXNlKSB7XG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgVFJQQ0Vycm9yKSB7XG4gICAgICAgIHJldHVybiBjYXVzZTtcbiAgICB9XG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IgJiYgY2F1c2UubmFtZSA9PT0gJ1RSUENFcnJvcicpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RycGMvdHJwYy9wdWxsLzQ4NDhcbiAgICAgICAgcmV0dXJuIGNhdXNlO1xuICAgIH1cbiAgICBjb25zdCB0cnBjRXJyb3IgPSBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgY29kZTogJ0lOVEVSTkFMX1NFUlZFUl9FUlJPUicsXG4gICAgICAgIGNhdXNlXG4gICAgfSk7XG4gICAgLy8gSW5oZXJpdCBzdGFjayBmcm9tIGVycm9yXG4gICAgaWYgKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IgJiYgY2F1c2Uuc3RhY2spIHtcbiAgICAgICAgdHJwY0Vycm9yLnN0YWNrID0gY2F1c2Uuc3RhY2s7XG4gICAgfVxuICAgIHJldHVybiB0cnBjRXJyb3I7XG59XG5jbGFzcyBVbmtub3duQ2F1c2VFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmZ1bmN0aW9uIGdldENhdXNlRnJvbVVua25vd24oY2F1c2UpIHtcbiAgICBpZiAoY2F1c2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gY2F1c2U7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgY2F1c2U7XG4gICAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicgfHwgY2F1c2UgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gUHJpbWl0aXZlIHR5cGVzIGp1c3QgZ2V0IHdyYXBwZWQgaW4gYW4gZXJyb3JcbiAgICBpZiAodHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihTdHJpbmcoY2F1c2UpKTtcbiAgICB9XG4gICAgLy8gSWYgaXQncyBhbiBvYmplY3QsIHdlJ2xsIGNyZWF0ZSBhIHN5bnRoZXRpYyBlcnJvclxuICAgIGlmIChpc09iamVjdChjYXVzZSkpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IFVua25vd25DYXVzZUVycm9yKCk7XG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gY2F1c2Upe1xuICAgICAgICAgICAgZXJyW2tleV0gPSBjYXVzZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5jbGFzcyBUUlBDRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIGNvbnN0IGNhdXNlID0gZ2V0Q2F1c2VGcm9tVW5rbm93bihvcHRzLmNhdXNlKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG9wdHMubWVzc2FnZSA/PyBjYXVzZT8ubWVzc2FnZSA/PyBvcHRzLmNvZGU7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuICAgICAgICBzdXBlcihtZXNzYWdlLCB7XG4gICAgICAgICAgICBjYXVzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb2RlID0gb3B0cy5jb2RlO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVFJQQ0Vycm9yJztcbiAgICAgICAgaWYgKCF0aGlzLmNhdXNlKSB7XG4gICAgICAgICAgICAvLyBpZGsgd2h5IHRoaXMgaXMgbmVlZGVkLCBidXQgaXQgaXNcbiAgICAgICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgVFJQQ0Vycm9yIGFzIFQsIGdldFRSUENFcnJvckZyb21Vbmtub3duIGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJpc09iamVjdCIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0VFJQQ0Vycm9yRnJvbVVua25vd24iLCJjYXVzZSIsIlRSUENFcnJvciIsIkVycm9yIiwibmFtZSIsInRycGNFcnJvciIsImNvZGUiLCJzdGFjayIsIlVua25vd25DYXVzZUVycm9yIiwiZ2V0Q2F1c2VGcm9tVW5rbm93biIsInR5cGUiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJlcnIiLCJrZXkiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJtZXNzYWdlIiwiVCIsImciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/adapters/fetch/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/adapters/fetch/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchRequestHandler: () => (/* binding */ fetchRequestHandler)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index-f91d720c.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _resolveHTTPResponse_cd1a9112_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../resolveHTTPResponse-cd1a9112.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/resolveHTTPResponse-cd1a9112.mjs\");\n/* harmony import */ var _batchStreamFormatter_fc1ffb26_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../batchStreamFormatter-fc1ffb26.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../codes-c924c3db.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n/* harmony import */ var _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config-00ffd309.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/config-00ffd309.mjs\");\n/* harmony import */ var _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../TRPCError-689e79f1.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../transformTRPCResponse-1153b421.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _contentType_778b33c3_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../contentType-778b33c3.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/contentType-778b33c3.mjs\");\n\n\n\n\n\n\n\n\nasync function fetchRequestHandler(opts) {\n    const resHeaders = new Headers();\n    const createContext = async ()=>{\n        return opts.createContext?.({\n            req: opts.req,\n            resHeaders\n        });\n    };\n    const url = new URL(opts.req.url);\n    const path = url.pathname.slice(opts.endpoint.length + 1);\n    const req = {\n        query: url.searchParams,\n        method: opts.req.method,\n        headers: Object.fromEntries(opts.req.headers),\n        body: opts.req.headers.get(\"content-type\")?.startsWith(\"application/json\") ? await opts.req.text() : \"\"\n    };\n    let resolve;\n    const promise = new Promise((r)=>resolve = r);\n    let status = 200;\n    let isStream = false;\n    let controller;\n    let encoder;\n    let formatter;\n    const unstable_onHead = (head, isStreaming)=>{\n        for (const [key, value] of Object.entries(head.headers ?? {})){\n            /* istanbul ignore if -- @preserve */ if (typeof value === \"undefined\") {\n                continue;\n            }\n            if (typeof value === \"string\") {\n                resHeaders.set(key, value);\n                continue;\n            }\n            for (const v of value){\n                resHeaders.append(key, v);\n            }\n        }\n        status = head.status;\n        if (isStreaming) {\n            resHeaders.set(\"Transfer-Encoding\", \"chunked\");\n            resHeaders.append(\"Vary\", \"trpc-batch-mode\");\n            const stream = new ReadableStream({\n                start (c) {\n                    controller = c;\n                }\n            });\n            const response = new Response(stream, {\n                status,\n                headers: resHeaders\n            });\n            resolve(response);\n            encoder = new TextEncoder();\n            formatter = (0,_batchStreamFormatter_fc1ffb26_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n            isStream = true;\n        }\n    };\n    const unstable_onChunk = ([index, string])=>{\n        if (index === -1) {\n            // full response, no streaming\n            const response = new Response(string || null, {\n                status,\n                headers: resHeaders\n            });\n            resolve(response);\n        } else {\n            controller.enqueue(encoder.encode(formatter(index, string)));\n        }\n    };\n    (0,_resolveHTTPResponse_cd1a9112_mjs__WEBPACK_IMPORTED_MODULE_1__.r)({\n        req,\n        createContext,\n        path,\n        router: opts.router,\n        batching: opts.batching,\n        responseMeta: opts.responseMeta,\n        onError (o) {\n            opts?.onError?.({\n                ...o,\n                req: opts.req\n            });\n        },\n        unstable_onHead,\n        unstable_onChunk\n    }).then(()=>{\n        if (isStream) {\n            controller.enqueue(encoder.encode(formatter.end()));\n            controller.close();\n        }\n    }).catch(()=>{\n        if (isStream) {\n            controller.close();\n        }\n    });\n    return promise;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/adapters/fetch/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getBatchStreamFormatter)\n/* harmony export */ });\n/**\n * Format a batch response as a line-delimited JSON stream\n * that the `unstable_httpBatchStreamLink` can parse:\n *\n * @example\n * ```ts\n * const formatter = getBatchStreamFormatter();\n * res.send(formatter(1, 'response #2'));\n * res.send(formatter(0, 'response #1'));\n * res.send(formatter.end());\n * ```\n *\n * Expected format:\n * ```json\n * {\"1\":\"response #2\"\n * ,\"0\":\"response #1\"\n * }\n * ```\n */ function getBatchStreamFormatter() {\n    let first = true;\n    function format(index, string) {\n        const prefix = first ? \"{\" : \",\";\n        first = false;\n        return `${prefix}\"${index}\":${string}\\n`;\n    }\n    format.end = ()=>\"}\";\n    return format;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvYmF0Y2hTdHJlYW1Gb3JtYXR0ZXItZmMxZmZiMjYubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0JDLEdBQUcsU0FBU0E7SUFDVCxJQUFJQyxRQUFRO0lBQ1osU0FBU0MsT0FBT0MsS0FBSyxFQUFFQyxNQUFNO1FBQ3pCLE1BQU1DLFNBQVNKLFFBQVEsTUFBTTtRQUM3QkEsUUFBUTtRQUNSLE9BQU8sQ0FBQyxFQUFFSSxPQUFPLENBQUMsRUFBRUYsTUFBTSxFQUFFLEVBQUVDLE9BQU8sRUFBRSxDQUFDO0lBQzVDO0lBQ0FGLE9BQU9JLEdBQUcsR0FBRyxJQUFJO0lBQ2pCLE9BQU9KO0FBQ1g7QUFFd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZXJvR3Jvdy8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9iYXRjaFN0cmVhbUZvcm1hdHRlci1mYzFmZmIyNi5tanM/OGE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZvcm1hdCBhIGJhdGNoIHJlc3BvbnNlIGFzIGEgbGluZS1kZWxpbWl0ZWQgSlNPTiBzdHJlYW1cbiAqIHRoYXQgdGhlIGB1bnN0YWJsZV9odHRwQmF0Y2hTdHJlYW1MaW5rYCBjYW4gcGFyc2U6XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBmb3JtYXR0ZXIgPSBnZXRCYXRjaFN0cmVhbUZvcm1hdHRlcigpO1xuICogcmVzLnNlbmQoZm9ybWF0dGVyKDEsICdyZXNwb25zZSAjMicpKTtcbiAqIHJlcy5zZW5kKGZvcm1hdHRlcigwLCAncmVzcG9uc2UgIzEnKSk7XG4gKiByZXMuc2VuZChmb3JtYXR0ZXIuZW5kKCkpO1xuICogYGBgXG4gKlxuICogRXhwZWN0ZWQgZm9ybWF0OlxuICogYGBganNvblxuICoge1wiMVwiOlwicmVzcG9uc2UgIzJcIlxuICogLFwiMFwiOlwicmVzcG9uc2UgIzFcIlxuICogfVxuICogYGBgXG4gKi8gZnVuY3Rpb24gZ2V0QmF0Y2hTdHJlYW1Gb3JtYXR0ZXIoKSB7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5kZXgsIHN0cmluZykge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBmaXJzdCA/ICd7JyA6ICcsJztcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH1cIiR7aW5kZXh9XCI6JHtzdHJpbmd9XFxuYDtcbiAgICB9XG4gICAgZm9ybWF0LmVuZCA9ICgpPT4nfSc7XG4gICAgcmV0dXJuIGZvcm1hdDtcbn1cblxuZXhwb3J0IHsgZ2V0QmF0Y2hTdHJlYW1Gb3JtYXR0ZXIgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImdldEJhdGNoU3RyZWFtRm9ybWF0dGVyIiwiZmlyc3QiLCJmb3JtYXQiLCJpbmRleCIsInN0cmluZyIsInByZWZpeCIsImVuZCIsImciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/batchStreamFormatter-fc1ffb26.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/codes-c924c3db.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   a: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   i: () => (/* binding */ invert)\n/* harmony export */ });\n/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQUcsU0FBU0EsT0FBT0MsR0FBRztJQUNuQixNQUFNQyxTQUFTQyxPQUFPQyxNQUFNLENBQUM7SUFDN0IsSUFBSSxNQUFNQyxPQUFPSixJQUFJO1FBQ2pCLE1BQU1LLElBQUlMLEdBQUcsQ0FBQ0ksSUFBSTtRQUNsQkgsTUFBTSxDQUFDSSxFQUFFLEdBQUdEO0lBQ2hCO0lBQ0EsT0FBT0g7QUFDWDtBQUVBLG1EQUFtRDtBQUNuRDs7Ozs7Q0FLQyxHQUFHLE1BQU1LLDBCQUEwQjtJQUNoQzs7O0dBR0QsR0FBR0MsYUFBYSxDQUFDO0lBQ2hCOztHQUVELEdBQUdDLGFBQWEsQ0FBQztJQUNoQiwwQkFBMEI7SUFDMUJDLHVCQUF1QixDQUFDO0lBQ3hCQyxpQkFBaUIsQ0FBQztJQUNsQixpQ0FBaUM7SUFDakNDLGNBQWMsQ0FBQztJQUNmQyxXQUFXLENBQUM7SUFDWkMsV0FBVyxDQUFDO0lBQ1pDLHNCQUFzQixDQUFDO0lBQ3ZCQyxTQUFTLENBQUM7SUFDVkMsVUFBVSxDQUFDO0lBQ1hDLHFCQUFxQixDQUFDO0lBQ3RCQyxtQkFBbUIsQ0FBQztJQUNwQkMsdUJBQXVCLENBQUM7SUFDeEJDLG1CQUFtQixDQUFDO0lBQ3BCQyx1QkFBdUIsQ0FBQztBQUM1QjtBQUNBLE1BQU1DLDZCQUE2QnZCLE9BQU9PO0FBRTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVyb0dyb3cvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29kZXMtYzkyNGMzZGIubWpzPzMwMjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBpbnZlcnQob2JqKSB7XG4gICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGNvbnN0IHYgPSBvYmpba2V5XTtcbiAgICAgICAgbmV3T2JqW3ZdID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xufVxuXG4vLyByZWZlcmVuY2U6IGh0dHBzOi8vd3d3Lmpzb25ycGMub3JnL3NwZWNpZmljYXRpb25cbi8qKlxuICogSlNPTi1SUEMgMi4wIEVycm9yIGNvZGVzXG4gKlxuICogYC0zMjAwMGAgdG8gYC0zMjA5OWAgYXJlIHJlc2VydmVkIGZvciBpbXBsZW1lbnRhdGlvbi1kZWZpbmVkIHNlcnZlci1lcnJvcnMuXG4gKiBGb3IgdFJQQyB3ZSdyZSBjb3B5aW5nIHRoZSBsYXN0IGRpZ2l0cyBvZiBIVFRQIDRYWCBlcnJvcnMuXG4gKi8gY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgPSB7XG4gICAgLyoqXG4gICAqIEludmFsaWQgSlNPTiB3YXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICogQW4gZXJyb3Igb2NjdXJyZWQgb24gdGhlIHNlcnZlciB3aGlsZSBwYXJzaW5nIHRoZSBKU09OIHRleHQuXG4gICAqLyBQQVJTRV9FUlJPUjogLTMyNzAwLFxuICAgIC8qKlxuICAgKiBUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LlxuICAgKi8gQkFEX1JFUVVFU1Q6IC0zMjYwMCxcbiAgICAvLyBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclxuICAgIElOVEVSTkFMX1NFUlZFUl9FUlJPUjogLTMyNjAzLFxuICAgIE5PVF9JTVBMRU1FTlRFRDogLTMyNjAzLFxuICAgIC8vIEltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yc1xuICAgIFVOQVVUSE9SSVpFRDogLTMyMDAxLFxuICAgIEZPUkJJRERFTjogLTMyMDAzLFxuICAgIE5PVF9GT1VORDogLTMyMDA0LFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiAtMzIwMDUsXG4gICAgVElNRU9VVDogLTMyMDA4LFxuICAgIENPTkZMSUNUOiAtMzIwMDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogLTMyMDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiAtMzIwMTMsXG4gICAgVU5QUk9DRVNTQUJMRV9DT05URU5UOiAtMzIwMjIsXG4gICAgVE9PX01BTllfUkVRVUVTVFM6IC0zMjAyOSxcbiAgICBDTElFTlRfQ0xPU0VEX1JFUVVFU1Q6IC0zMjA5OVxufTtcbmNvbnN0IFRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSID0gaW52ZXJ0KFRSUENfRVJST1JfQ09ERVNfQllfS0VZKTtcblxuZXhwb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgYXMgVCwgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgYXMgYSwgaW52ZXJ0IGFzIGkgfTtcbiJdLCJuYW1lcyI6WyJpbnZlcnQiLCJvYmoiLCJuZXdPYmoiLCJPYmplY3QiLCJjcmVhdGUiLCJrZXkiLCJ2IiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJQQVJTRV9FUlJPUiIsIkJBRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiVU5BVVRIT1JJWkVEIiwiRk9SQklEREVOIiwiTk9UX0ZPVU5EIiwiTUVUSE9EX05PVF9TVVBQT1JURUQiLCJUSU1FT1VUIiwiQ09ORkxJQ1QiLCJQUkVDT05ESVRJT05fRkFJTEVEIiwiUEFZTE9BRF9UT09fTEFSR0UiLCJVTlBST0NFU1NBQkxFX0NPTlRFTlQiLCJUT09fTUFOWV9SRVFVRVNUUyIsIkNMSUVOVF9DTE9TRURfUkVRVUVTVCIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwiVCIsImEiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/config-00ffd309.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/config-00ffd309.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ defaultTransformer),\n/* harmony export */   b: () => (/* binding */ callProcedure),\n/* harmony export */   c: () => (/* binding */ createRouterFactory),\n/* harmony export */   d: () => (/* binding */ defaultFormatter),\n/* harmony export */   g: () => (/* binding */ getDataTransformer),\n/* harmony export */   i: () => (/* binding */ isServerDefault),\n/* harmony export */   p: () => (/* binding */ procedureTypes)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-689e79f1.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n/**\n * @public\n */ /**\n * @internal\n */ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n * @internal\n */ const defaultTransformer = {\n    _default: true,\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n/**\n * Create an object without inheriting anything from `Object.prototype`\n * @internal\n */ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nconst procedureTypes = [\n    \"query\",\n    \"mutation\",\n    \"subscription\"\n];\nfunction isRouter(procedureOrRouter) {\n    return \"router\" in procedureOrRouter._def;\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n * Reserved words that can't be used as router or procedure names\n */ const reservedWords = [\n    /**\n   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n   * since JS will think that `.then` is something that exists\n   */ \"then\"\n];\n/**\n * @internal\n */ function createRouterFactory(config) {\n    return function createRouterInner(procedures) {\n        const reservedWordsUsed = new Set(Object.keys(procedures).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) {\n            throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        }\n        const routerProcedures = omitPrototype({});\n        function recursiveGetPaths(procedures, path = \"\") {\n            for (const [key, procedureOrRouter] of Object.entries(procedures ?? {})){\n                const newPath = `${path}${key}`;\n                if (isRouter(procedureOrRouter)) {\n                    recursiveGetPaths(procedureOrRouter._def.procedures, `${newPath}.`);\n                    continue;\n                }\n                if (routerProcedures[newPath]) {\n                    throw new Error(`Duplicate key: ${newPath}`);\n                }\n                routerProcedures[newPath] = procedureOrRouter;\n            }\n        }\n        recursiveGetPaths(procedures);\n        const _def = {\n            _config: config,\n            router: true,\n            procedures: routerProcedures,\n            ...emptyRouter,\n            record: procedures,\n            queries: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.query).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {}),\n            mutations: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.mutation).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {}),\n            subscriptions: Object.entries(routerProcedures).filter((pair)=>pair[1]._def.subscription).reduce((acc, [key, val])=>({\n                    ...acc,\n                    [key]: val\n                }), {})\n        };\n        const router = {\n            ...procedures,\n            _def,\n            createCaller (ctx) {\n                const proxy = (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(({ path, args })=>{\n                    // interop mode\n                    if (path.length === 1 && procedureTypes.includes(path[0])) {\n                        return callProcedure({\n                            procedures: _def.procedures,\n                            path: args[0],\n                            rawInput: args[1],\n                            ctx,\n                            type: path[0]\n                        });\n                    }\n                    const fullPath = path.join(\".\");\n                    const procedure = _def.procedures[fullPath];\n                    let type = \"query\";\n                    if (procedure._def.mutation) {\n                        type = \"mutation\";\n                    } else if (procedure._def.subscription) {\n                        type = \"subscription\";\n                    }\n                    return procedure({\n                        path: fullPath,\n                        rawInput: args[0],\n                        ctx,\n                        type\n                    });\n                });\n                return proxy;\n            },\n            getErrorShape (opts) {\n                const { path, error } = opts;\n                const { code } = opts.error;\n                const shape = {\n                    message: error.message,\n                    code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_2__.T[code],\n                    data: {\n                        code,\n                        httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(error)\n                    }\n                };\n                if (config.isDev && typeof opts.error.stack === \"string\") {\n                    shape.data.stack = opts.error.stack;\n                }\n                if (typeof path === \"string\") {\n                    shape.data.path = path;\n                }\n                return this._def._config.errorFormatter({\n                    ...opts,\n                    shape\n                });\n            }\n        };\n        return router;\n    };\n}\n/**\n * @internal\n */ function callProcedure(opts) {\n    const { type, path } = opts;\n    if (!(path in opts.procedures) || !opts.procedures[path]?._def[type]) {\n        throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"NOT_FOUND\",\n            message: `No \"${type}\"-procedure on path \"${path}\"`\n        });\n    }\n    const procedure = opts.procedures[path];\n    return procedure(opts);\n}\n/**\n * The default check to see if we're in a server\n */ const isServerDefault =  true || 0;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29uZmlnLTAwZmZkMzA5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQ3dDO0FBQzlCO0FBRXBFOztDQUVDLEdBQUc7O0NBRUgsR0FBRyxTQUFTTyxtQkFBbUJDLFdBQVc7SUFDdkMsSUFBSSxXQUFXQSxhQUFhO1FBQ3hCLE9BQU9BO0lBQ1g7SUFDQSxPQUFPO1FBQ0hDLE9BQU9EO1FBQ1BFLFFBQVFGO0lBQ1o7QUFDSjtBQUNBOztDQUVDLEdBQUcsTUFBTUcscUJBQXFCO0lBQzNCQyxVQUFVO0lBQ1ZILE9BQU87UUFDSEksV0FBVyxDQUFDQyxNQUFNQTtRQUNsQkMsYUFBYSxDQUFDRCxNQUFNQTtJQUN4QjtJQUNBSixRQUFRO1FBQ0pHLFdBQVcsQ0FBQ0MsTUFBTUE7UUFDbEJDLGFBQWEsQ0FBQ0QsTUFBTUE7SUFDeEI7QUFDSjtBQUVBLE1BQU1FLG1CQUFtQixDQUFDLEVBQUVDLEtBQUssRUFBRztJQUNoQyxPQUFPQTtBQUNYO0FBRUE7OztDQUdDLEdBQUcsU0FBU0MsY0FBY0osR0FBRztJQUMxQixPQUFPSyxPQUFPQyxNQUFNLENBQUNELE9BQU9FLE1BQU0sQ0FBQyxPQUFPUDtBQUM5QztBQUVBLE1BQU1RLGlCQUFpQjtJQUNuQjtJQUNBO0lBQ0E7Q0FDSDtBQUVELFNBQVNDLFNBQVNDLGlCQUFpQjtJQUMvQixPQUFPLFlBQVlBLGtCQUFrQkMsSUFBSTtBQUM3QztBQUNBLE1BQU1DLGNBQWM7SUFDaEJDLE1BQU07SUFDTkMsYUFBYTtJQUNiQyxPQUFPO0lBQ1BDLFNBQVMsQ0FBQztJQUNWQyxXQUFXLENBQUM7SUFDWkMsZUFBZSxDQUFDO0lBQ2hCQyxnQkFBZ0JqQjtJQUNoQlIsYUFBYUc7QUFDakI7QUFDQTs7Q0FFQyxHQUFHLE1BQU11QixnQkFBZ0I7SUFDdEI7OztHQUdELEdBQUc7Q0FDTDtBQUNEOztDQUVDLEdBQUcsU0FBU0Msb0JBQW9CQyxNQUFNO0lBQ25DLE9BQU8sU0FBU0Msa0JBQWtCQyxVQUFVO1FBQ3hDLE1BQU1DLG9CQUFvQixJQUFJQyxJQUFJckIsT0FBT3NCLElBQUksQ0FBQ0gsWUFBWUksTUFBTSxDQUFDLENBQUNDLElBQUlULGNBQWNVLFFBQVEsQ0FBQ0Q7UUFDN0YsSUFBSUosa0JBQWtCTSxJQUFJLEdBQUcsR0FBRztZQUM1QixNQUFNLElBQUlDLE1BQU0sK0NBQStDQyxNQUFNQyxJQUFJLENBQUNULG1CQUFtQlUsSUFBSSxDQUFDO1FBQ3RHO1FBQ0EsTUFBTUMsbUJBQW1CaEMsY0FBYyxDQUFDO1FBQ3hDLFNBQVNpQyxrQkFBa0JiLFVBQVUsRUFBRWMsT0FBTyxFQUFFO1lBQzVDLEtBQUssTUFBTSxDQUFDQyxLQUFLN0Isa0JBQWtCLElBQUlMLE9BQU9tQyxPQUFPLENBQUNoQixjQUFjLENBQUMsR0FBRztnQkFDcEUsTUFBTWlCLFVBQVUsQ0FBQyxFQUFFSCxLQUFLLEVBQUVDLElBQUksQ0FBQztnQkFDL0IsSUFBSTlCLFNBQVNDLG9CQUFvQjtvQkFDN0IyQixrQkFBa0IzQixrQkFBa0JDLElBQUksQ0FBQ2EsVUFBVSxFQUFFLENBQUMsRUFBRWlCLFFBQVEsQ0FBQyxDQUFDO29CQUNsRTtnQkFDSjtnQkFDQSxJQUFJTCxnQkFBZ0IsQ0FBQ0ssUUFBUSxFQUFFO29CQUMzQixNQUFNLElBQUlULE1BQU0sQ0FBQyxlQUFlLEVBQUVTLFFBQVEsQ0FBQztnQkFDL0M7Z0JBQ0FMLGdCQUFnQixDQUFDSyxRQUFRLEdBQUcvQjtZQUNoQztRQUNKO1FBQ0EyQixrQkFBa0JiO1FBQ2xCLE1BQU1iLE9BQU87WUFDVCtCLFNBQVNwQjtZQUNUcUIsUUFBUTtZQUNSbkIsWUFBWVk7WUFDWixHQUFHeEIsV0FBVztZQUNkZ0MsUUFBUXBCO1lBQ1JSLFNBQVNYLE9BQU9tQyxPQUFPLENBQUNKLGtCQUFrQlIsTUFBTSxDQUFDLENBQUNpQixPQUFPQSxJQUFJLENBQUMsRUFBRSxDQUFDbEMsSUFBSSxDQUFDbUMsS0FBSyxFQUFFQyxNQUFNLENBQUMsQ0FBQ0MsS0FBSyxDQUFDVCxLQUFLVSxJQUFJLEdBQUk7b0JBQ2hHLEdBQUdELEdBQUc7b0JBQ04sQ0FBQ1QsSUFBSSxFQUFFVTtnQkFDWCxJQUFJLENBQUM7WUFDVGhDLFdBQVdaLE9BQU9tQyxPQUFPLENBQUNKLGtCQUFrQlIsTUFBTSxDQUFDLENBQUNpQixPQUFPQSxJQUFJLENBQUMsRUFBRSxDQUFDbEMsSUFBSSxDQUFDdUMsUUFBUSxFQUFFSCxNQUFNLENBQUMsQ0FBQ0MsS0FBSyxDQUFDVCxLQUFLVSxJQUFJLEdBQUk7b0JBQ3JHLEdBQUdELEdBQUc7b0JBQ04sQ0FBQ1QsSUFBSSxFQUFFVTtnQkFDWCxJQUFJLENBQUM7WUFDVC9CLGVBQWViLE9BQU9tQyxPQUFPLENBQUNKLGtCQUFrQlIsTUFBTSxDQUFDLENBQUNpQixPQUFPQSxJQUFJLENBQUMsRUFBRSxDQUFDbEMsSUFBSSxDQUFDd0MsWUFBWSxFQUFFSixNQUFNLENBQUMsQ0FBQ0MsS0FBSyxDQUFDVCxLQUFLVSxJQUFJLEdBQUk7b0JBQzdHLEdBQUdELEdBQUc7b0JBQ04sQ0FBQ1QsSUFBSSxFQUFFVTtnQkFDWCxJQUFJLENBQUM7UUFDYjtRQUNBLE1BQU1OLFNBQVM7WUFDWCxHQUFHbkIsVUFBVTtZQUNiYjtZQUNBeUMsY0FBY0MsR0FBRztnQkFDYixNQUFNQyxRQUFRakUsc0RBQW9CQSxDQUFDLENBQUMsRUFBRWlELElBQUksRUFBR2lCLElBQUksRUFBRztvQkFDaEQsZUFBZTtvQkFDZixJQUFJakIsS0FBS2tCLE1BQU0sS0FBSyxLQUFLaEQsZUFBZXNCLFFBQVEsQ0FBQ1EsSUFBSSxDQUFDLEVBQUUsR0FBRzt3QkFDdkQsT0FBT21CLGNBQWM7NEJBQ2pCakMsWUFBWWIsS0FBS2EsVUFBVTs0QkFDM0JjLE1BQU1pQixJQUFJLENBQUMsRUFBRTs0QkFDYkcsVUFBVUgsSUFBSSxDQUFDLEVBQUU7NEJBQ2pCRjs0QkFDQU0sTUFBTXJCLElBQUksQ0FBQyxFQUFFO3dCQUNqQjtvQkFDSjtvQkFDQSxNQUFNc0IsV0FBV3RCLEtBQUtILElBQUksQ0FBQztvQkFDM0IsTUFBTTBCLFlBQVlsRCxLQUFLYSxVQUFVLENBQUNvQyxTQUFTO29CQUMzQyxJQUFJRCxPQUFPO29CQUNYLElBQUlFLFVBQVVsRCxJQUFJLENBQUN1QyxRQUFRLEVBQUU7d0JBQ3pCUyxPQUFPO29CQUNYLE9BQU8sSUFBSUUsVUFBVWxELElBQUksQ0FBQ3dDLFlBQVksRUFBRTt3QkFDcENRLE9BQU87b0JBQ1g7b0JBQ0EsT0FBT0UsVUFBVTt3QkFDYnZCLE1BQU1zQjt3QkFDTkYsVUFBVUgsSUFBSSxDQUFDLEVBQUU7d0JBQ2pCRjt3QkFDQU07b0JBQ0o7Z0JBQ0o7Z0JBQ0EsT0FBT0w7WUFDWDtZQUNBUSxlQUFlQyxJQUFJO2dCQUNmLE1BQU0sRUFBRXpCLElBQUksRUFBRzBCLEtBQUssRUFBRyxHQUFHRDtnQkFDMUIsTUFBTSxFQUFFRSxJQUFJLEVBQUcsR0FBR0YsS0FBS0MsS0FBSztnQkFDNUIsTUFBTTdELFFBQVE7b0JBQ1YrRCxTQUFTRixNQUFNRSxPQUFPO29CQUN0QkQsTUFBTXpFLGtEQUF1QixDQUFDeUUsS0FBSztvQkFDbkNFLE1BQU07d0JBQ0ZGO3dCQUNBRyxZQUFZN0Usc0RBQTBCQSxDQUFDeUU7b0JBQzNDO2dCQUNKO2dCQUNBLElBQUkxQyxPQUFPK0MsS0FBSyxJQUFJLE9BQU9OLEtBQUtDLEtBQUssQ0FBQ00sS0FBSyxLQUFLLFVBQVU7b0JBQ3REbkUsTUFBTWdFLElBQUksQ0FBQ0csS0FBSyxHQUFHUCxLQUFLQyxLQUFLLENBQUNNLEtBQUs7Z0JBQ3ZDO2dCQUNBLElBQUksT0FBT2hDLFNBQVMsVUFBVTtvQkFDMUJuQyxNQUFNZ0UsSUFBSSxDQUFDN0IsSUFBSSxHQUFHQTtnQkFDdEI7Z0JBQ0EsT0FBTyxJQUFJLENBQUMzQixJQUFJLENBQUMrQixPQUFPLENBQUN2QixjQUFjLENBQUM7b0JBQ3BDLEdBQUc0QyxJQUFJO29CQUNQNUQ7Z0JBQ0o7WUFDSjtRQUNKO1FBQ0EsT0FBT3dDO0lBQ1g7QUFDSjtBQUNBOztDQUVDLEdBQUcsU0FBU2MsY0FBY00sSUFBSTtJQUMzQixNQUFNLEVBQUVKLElBQUksRUFBR3JCLElBQUksRUFBRyxHQUFHeUI7SUFDekIsSUFBSSxDQUFFekIsQ0FBQUEsUUFBUXlCLEtBQUt2QyxVQUFVLEtBQUssQ0FBQ3VDLEtBQUt2QyxVQUFVLENBQUNjLEtBQUssRUFBRTNCLElBQUksQ0FBQ2dELEtBQUssRUFBRTtRQUNsRSxNQUFNLElBQUl4RSxzREFBU0EsQ0FBQztZQUNoQjhFLE1BQU07WUFDTkMsU0FBUyxDQUFDLElBQUksRUFBRVAsS0FBSyxxQkFBcUIsRUFBRXJCLEtBQUssQ0FBQyxDQUFDO1FBQ3ZEO0lBQ0o7SUFDQSxNQUFNdUIsWUFBWUUsS0FBS3ZDLFVBQVUsQ0FBQ2MsS0FBSztJQUN2QyxPQUFPdUIsVUFBVUU7QUFDckI7QUFFQTs7Q0FFQyxHQUFHLE1BQU1RLGtCQUFrQixLQUE4SU0sSUFBSSxDQUEyQ0M7QUFFN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZXJvR3Jvdy8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9jb25maWctMDBmZmQzMDkubWpzP2IwN2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVCBhcyBUUlBDRXJyb3IgfSBmcm9tICcuL1RSUENFcnJvci02ODllNzlmMS5tanMnO1xuaW1wb3J0IHsgYSBhcyBjcmVhdGVSZWN1cnNpdmVQcm94eSwgZyBhcyBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciB9IGZyb20gJy4vaW5kZXgtZjkxZDcyMGMubWpzJztcbmltcG9ydCB7IFQgYXMgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkgfSBmcm9tICcuL2NvZGVzLWM5MjRjM2RiLm1qcyc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovIC8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gZ2V0RGF0YVRyYW5zZm9ybWVyKHRyYW5zZm9ybWVyKSB7XG4gICAgaWYgKCdpbnB1dCcgaW4gdHJhbnNmb3JtZXIpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpbnB1dDogdHJhbnNmb3JtZXIsXG4gICAgICAgIG91dHB1dDogdHJhbnNmb3JtZXJcbiAgICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBjb25zdCBkZWZhdWx0VHJhbnNmb3JtZXIgPSB7XG4gICAgX2RlZmF1bHQ6IHRydWUsXG4gICAgaW5wdXQ6IHtcbiAgICAgICAgc2VyaWFsaXplOiAob2JqKT0+b2JqLFxuICAgICAgICBkZXNlcmlhbGl6ZTogKG9iaik9Pm9ialxuICAgIH0sXG4gICAgb3V0cHV0OiB7XG4gICAgICAgIHNlcmlhbGl6ZTogKG9iaik9Pm9iaixcbiAgICAgICAgZGVzZXJpYWxpemU6IChvYmopPT5vYmpcbiAgICB9XG59O1xuXG5jb25zdCBkZWZhdWx0Rm9ybWF0dGVyID0gKHsgc2hhcGUgIH0pPT57XG4gICAgcmV0dXJuIHNoYXBlO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gb2JqZWN0IHdpdGhvdXQgaW5oZXJpdGluZyBhbnl0aGluZyBmcm9tIGBPYmplY3QucHJvdG90eXBlYFxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gb21pdFByb3RvdHlwZShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBvYmopO1xufVxuXG5jb25zdCBwcm9jZWR1cmVUeXBlcyA9IFtcbiAgICAncXVlcnknLFxuICAgICdtdXRhdGlvbicsXG4gICAgJ3N1YnNjcmlwdGlvbidcbl07XG5cbmZ1bmN0aW9uIGlzUm91dGVyKHByb2NlZHVyZU9yUm91dGVyKSB7XG4gICAgcmV0dXJuICdyb3V0ZXInIGluIHByb2NlZHVyZU9yUm91dGVyLl9kZWY7XG59XG5jb25zdCBlbXB0eVJvdXRlciA9IHtcbiAgICBfY3R4OiBudWxsLFxuICAgIF9lcnJvclNoYXBlOiBudWxsLFxuICAgIF9tZXRhOiBudWxsLFxuICAgIHF1ZXJpZXM6IHt9LFxuICAgIG11dGF0aW9uczoge30sXG4gICAgc3Vic2NyaXB0aW9uczoge30sXG4gICAgZXJyb3JGb3JtYXR0ZXI6IGRlZmF1bHRGb3JtYXR0ZXIsXG4gICAgdHJhbnNmb3JtZXI6IGRlZmF1bHRUcmFuc2Zvcm1lclxufTtcbi8qKlxuICogUmVzZXJ2ZWQgd29yZHMgdGhhdCBjYW4ndCBiZSB1c2VkIGFzIHJvdXRlciBvciBwcm9jZWR1cmUgbmFtZXNcbiAqLyBjb25zdCByZXNlcnZlZFdvcmRzID0gW1xuICAgIC8qKlxuICAgKiBUaGVuIGlzIGEgcmVzZXJ2ZWQgd29yZCBiZWNhdXNlIG90aGVyd2lzZSB3ZSBjYW4ndCByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmV0dXJucyBhIFByb3h5XG4gICAqIHNpbmNlIEpTIHdpbGwgdGhpbmsgdGhhdCBgLnRoZW5gIGlzIHNvbWV0aGluZyB0aGF0IGV4aXN0c1xuICAgKi8gJ3RoZW4nXG5dO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJGYWN0b3J5KGNvbmZpZykge1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJJbm5lcihwcm9jZWR1cmVzKSB7XG4gICAgICAgIGNvbnN0IHJlc2VydmVkV29yZHNVc2VkID0gbmV3IFNldChPYmplY3Qua2V5cyhwcm9jZWR1cmVzKS5maWx0ZXIoKHYpPT5yZXNlcnZlZFdvcmRzLmluY2x1ZGVzKHYpKSk7XG4gICAgICAgIGlmIChyZXNlcnZlZFdvcmRzVXNlZC5zaXplID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlcnZlZCB3b3JkcyB1c2VkIGluIGByb3V0ZXIoe30pYCBjYWxsOiAnICsgQXJyYXkuZnJvbShyZXNlcnZlZFdvcmRzVXNlZCkuam9pbignLCAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91dGVyUHJvY2VkdXJlcyA9IG9taXRQcm90b3R5cGUoe30pO1xuICAgICAgICBmdW5jdGlvbiByZWN1cnNpdmVHZXRQYXRocyhwcm9jZWR1cmVzLCBwYXRoID0gJycpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgcHJvY2VkdXJlT3JSb3V0ZXJdIG9mIE9iamVjdC5lbnRyaWVzKHByb2NlZHVyZXMgPz8ge30pKXtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXRoID0gYCR7cGF0aH0ke2tleX1gO1xuICAgICAgICAgICAgICAgIGlmIChpc1JvdXRlcihwcm9jZWR1cmVPclJvdXRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlR2V0UGF0aHMocHJvY2VkdXJlT3JSb3V0ZXIuX2RlZi5wcm9jZWR1cmVzLCBgJHtuZXdQYXRofS5gKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyb3V0ZXJQcm9jZWR1cmVzW25ld1BhdGhdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGtleTogJHtuZXdQYXRofWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb3V0ZXJQcm9jZWR1cmVzW25ld1BhdGhdID0gcHJvY2VkdXJlT3JSb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVjdXJzaXZlR2V0UGF0aHMocHJvY2VkdXJlcyk7XG4gICAgICAgIGNvbnN0IF9kZWYgPSB7XG4gICAgICAgICAgICBfY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICByb3V0ZXI6IHRydWUsXG4gICAgICAgICAgICBwcm9jZWR1cmVzOiByb3V0ZXJQcm9jZWR1cmVzLFxuICAgICAgICAgICAgLi4uZW1wdHlSb3V0ZXIsXG4gICAgICAgICAgICByZWNvcmQ6IHByb2NlZHVyZXMsXG4gICAgICAgICAgICBxdWVyaWVzOiBPYmplY3QuZW50cmllcyhyb3V0ZXJQcm9jZWR1cmVzKS5maWx0ZXIoKHBhaXIpPT5wYWlyWzFdLl9kZWYucXVlcnkpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWxdKT0+KHtcbiAgICAgICAgICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgICAgICAgICBba2V5XTogdmFsXG4gICAgICAgICAgICAgICAgfSksIHt9KSxcbiAgICAgICAgICAgIG11dGF0aW9uczogT2JqZWN0LmVudHJpZXMocm91dGVyUHJvY2VkdXJlcykuZmlsdGVyKChwYWlyKT0+cGFpclsxXS5fZGVmLm11dGF0aW9uKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsXSk9Pih7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAgICAgW2tleV06IHZhbFxuICAgICAgICAgICAgICAgIH0pLCB7fSksXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zOiBPYmplY3QuZW50cmllcyhyb3V0ZXJQcm9jZWR1cmVzKS5maWx0ZXIoKHBhaXIpPT5wYWlyWzFdLl9kZWYuc3Vic2NyaXB0aW9uKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsXSk9Pih7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAgICAgW2tleV06IHZhbFxuICAgICAgICAgICAgICAgIH0pLCB7fSlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgcm91dGVyID0ge1xuICAgICAgICAgICAgLi4ucHJvY2VkdXJlcyxcbiAgICAgICAgICAgIF9kZWYsXG4gICAgICAgICAgICBjcmVhdGVDYWxsZXIgKGN0eCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3h5ID0gY3JlYXRlUmVjdXJzaXZlUHJveHkoKHsgcGF0aCAsIGFyZ3MgIH0pPT57XG4gICAgICAgICAgICAgICAgICAgIC8vIGludGVyb3AgbW9kZVxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEgJiYgcHJvY2VkdXJlVHlwZXMuaW5jbHVkZXMocGF0aFswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsUHJvY2VkdXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZWR1cmVzOiBfZGVmLnByb2NlZHVyZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdJbnB1dDogYXJnc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcGF0aFswXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4oJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvY2VkdXJlID0gX2RlZi5wcm9jZWR1cmVzW2Z1bGxQYXRoXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSAncXVlcnknO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2VkdXJlLl9kZWYubXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnbXV0YXRpb24nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb2NlZHVyZS5fZGVmLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdzdWJzY3JpcHRpb24nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZWR1cmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICByYXdJbnB1dDogYXJnc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEVycm9yU2hhcGUgKG9wdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggLCBlcnJvciAgfSA9IG9wdHM7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb2RlICB9ID0gb3B0cy5lcnJvcjtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGFwZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogVFJQQ19FUlJPUl9DT0RFU19CWV9LRVlbY29kZV0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwU3RhdHVzOiBnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0RldiAmJiB0eXBlb2Ygb3B0cy5lcnJvci5zdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuZGF0YS5zdGFjayA9IG9wdHMuZXJyb3Iuc3RhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuZGF0YS5wYXRoID0gcGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5fY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJvdXRlcjtcbiAgICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBjYWxsUHJvY2VkdXJlKG9wdHMpIHtcbiAgICBjb25zdCB7IHR5cGUgLCBwYXRoICB9ID0gb3B0cztcbiAgICBpZiAoIShwYXRoIGluIG9wdHMucHJvY2VkdXJlcykgfHwgIW9wdHMucHJvY2VkdXJlc1twYXRoXT8uX2RlZlt0eXBlXSkge1xuICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICAgIGNvZGU6ICdOT1RfRk9VTkQnLFxuICAgICAgICAgICAgbWVzc2FnZTogYE5vIFwiJHt0eXBlfVwiLXByb2NlZHVyZSBvbiBwYXRoIFwiJHtwYXRofVwiYFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcHJvY2VkdXJlID0gb3B0cy5wcm9jZWR1cmVzW3BhdGhdO1xuICAgIHJldHVybiBwcm9jZWR1cmUob3B0cyk7XG59XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgY2hlY2sgdG8gc2VlIGlmIHdlJ3JlIGluIGEgc2VydmVyXG4gKi8gY29uc3QgaXNTZXJ2ZXJEZWZhdWx0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgJ0Rlbm8nIGluIHdpbmRvdyB8fCBnbG9iYWxUaGlzLnByb2Nlc3M/LmVudj8uTk9ERV9FTlYgPT09ICd0ZXN0JyB8fCAhIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5KRVNUX1dPUktFUl9JRCB8fCAhIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5WSVRFU1RfV09SS0VSX0lEO1xuXG5leHBvcnQgeyBkZWZhdWx0VHJhbnNmb3JtZXIgYXMgYSwgY2FsbFByb2NlZHVyZSBhcyBiLCBjcmVhdGVSb3V0ZXJGYWN0b3J5IGFzIGMsIGRlZmF1bHRGb3JtYXR0ZXIgYXMgZCwgZ2V0RGF0YVRyYW5zZm9ybWVyIGFzIGcsIGlzU2VydmVyRGVmYXVsdCBhcyBpLCBwcm9jZWR1cmVUeXBlcyBhcyBwIH07XG4iXSwibmFtZXMiOlsiVCIsIlRSUENFcnJvciIsImEiLCJjcmVhdGVSZWN1cnNpdmVQcm94eSIsImciLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIlRSUENfRVJST1JfQ09ERVNfQllfS0VZIiwiZ2V0RGF0YVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZXIiLCJpbnB1dCIsIm91dHB1dCIsImRlZmF1bHRUcmFuc2Zvcm1lciIsIl9kZWZhdWx0Iiwic2VyaWFsaXplIiwib2JqIiwiZGVzZXJpYWxpemUiLCJkZWZhdWx0Rm9ybWF0dGVyIiwic2hhcGUiLCJvbWl0UHJvdG90eXBlIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlIiwicHJvY2VkdXJlVHlwZXMiLCJpc1JvdXRlciIsInByb2NlZHVyZU9yUm91dGVyIiwiX2RlZiIsImVtcHR5Um91dGVyIiwiX2N0eCIsIl9lcnJvclNoYXBlIiwiX21ldGEiLCJxdWVyaWVzIiwibXV0YXRpb25zIiwic3Vic2NyaXB0aW9ucyIsImVycm9yRm9ybWF0dGVyIiwicmVzZXJ2ZWRXb3JkcyIsImNyZWF0ZVJvdXRlckZhY3RvcnkiLCJjb25maWciLCJjcmVhdGVSb3V0ZXJJbm5lciIsInByb2NlZHVyZXMiLCJyZXNlcnZlZFdvcmRzVXNlZCIsIlNldCIsImtleXMiLCJmaWx0ZXIiLCJ2IiwiaW5jbHVkZXMiLCJzaXplIiwiRXJyb3IiLCJBcnJheSIsImZyb20iLCJqb2luIiwicm91dGVyUHJvY2VkdXJlcyIsInJlY3Vyc2l2ZUdldFBhdGhzIiwicGF0aCIsImtleSIsImVudHJpZXMiLCJuZXdQYXRoIiwiX2NvbmZpZyIsInJvdXRlciIsInJlY29yZCIsInBhaXIiLCJxdWVyeSIsInJlZHVjZSIsImFjYyIsInZhbCIsIm11dGF0aW9uIiwic3Vic2NyaXB0aW9uIiwiY3JlYXRlQ2FsbGVyIiwiY3R4IiwicHJveHkiLCJhcmdzIiwibGVuZ3RoIiwiY2FsbFByb2NlZHVyZSIsInJhd0lucHV0IiwidHlwZSIsImZ1bGxQYXRoIiwicHJvY2VkdXJlIiwiZ2V0RXJyb3JTaGFwZSIsIm9wdHMiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiZGF0YSIsImh0dHBTdGF0dXMiLCJpc0RldiIsInN0YWNrIiwiaXNTZXJ2ZXJEZWZhdWx0Iiwid2luZG93IiwiZ2xvYmFsVGhpcyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkpFU1RfV09SS0VSX0lEIiwiVklURVNUX1dPUktFUl9JRCIsImIiLCJjIiwiZCIsImkiLCJwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/config-00ffd309.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/contentType-778b33c3.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/contentType-778b33c3.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getJsonContentTypeInputs)\n/* harmony export */ });\n/* harmony import */ var _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCError-689e79f1.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs\");\n\nfunction getRawProcedureInputOrThrow(opts) {\n    const { req } = opts;\n    try {\n        if (req.method === \"GET\") {\n            if (!req.query.has(\"input\")) {\n                return undefined;\n            }\n            const raw = req.query.get(\"input\");\n            return JSON.parse(raw);\n        }\n        if (!opts.preprocessedBody && typeof req.body === \"string\") {\n            // A mutation with no inputs will have req.body === ''\n            return req.body.length === 0 ? undefined : JSON.parse(req.body);\n        }\n        return req.body;\n    } catch (cause) {\n        throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"PARSE_ERROR\",\n            cause\n        });\n    }\n}\nconst deserializeInputValue = (rawValue, transformer)=>{\n    return typeof rawValue !== \"undefined\" ? transformer.input.deserialize(rawValue) : rawValue;\n};\nconst getJsonContentTypeInputs = (opts)=>{\n    const rawInput = getRawProcedureInputOrThrow(opts);\n    const transformer = opts.router._def._config.transformer;\n    if (!opts.isBatchCall) {\n        return {\n            0: deserializeInputValue(rawInput, transformer)\n        };\n    }\n    /* istanbul ignore if  */ if (rawInput == null || typeof rawInput !== \"object\" || Array.isArray(rawInput)) {\n        throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_0__.T({\n            code: \"BAD_REQUEST\",\n            message: '\"input\" needs to be an object when doing a batch call'\n        });\n    }\n    const input = {};\n    for(const key in rawInput){\n        const k = key;\n        const rawValue = rawInput[k];\n        const value = deserializeInputValue(rawValue, transformer);\n        input[k] = value;\n    }\n    return input;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29udGVudFR5cGUtNzc4YjMzYzMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBEO0FBRTFELFNBQVNFLDRCQUE0QkMsSUFBSTtJQUNyQyxNQUFNLEVBQUVDLEdBQUcsRUFBRyxHQUFHRDtJQUNqQixJQUFJO1FBQ0EsSUFBSUMsSUFBSUMsTUFBTSxLQUFLLE9BQU87WUFDdEIsSUFBSSxDQUFDRCxJQUFJRSxLQUFLLENBQUNDLEdBQUcsQ0FBQyxVQUFVO2dCQUN6QixPQUFPQztZQUNYO1lBQ0EsTUFBTUMsTUFBTUwsSUFBSUUsS0FBSyxDQUFDSSxHQUFHLENBQUM7WUFDMUIsT0FBT0MsS0FBS0MsS0FBSyxDQUFDSDtRQUN0QjtRQUNBLElBQUksQ0FBQ04sS0FBS1UsZ0JBQWdCLElBQUksT0FBT1QsSUFBSVUsSUFBSSxLQUFLLFVBQVU7WUFDeEQsc0RBQXNEO1lBQ3RELE9BQU9WLElBQUlVLElBQUksQ0FBQ0MsTUFBTSxLQUFLLElBQUlQLFlBQVlHLEtBQUtDLEtBQUssQ0FBQ1IsSUFBSVUsSUFBSTtRQUNsRTtRQUNBLE9BQU9WLElBQUlVLElBQUk7SUFDbkIsRUFBRSxPQUFPRSxPQUFPO1FBQ1osTUFBTSxJQUFJZixzREFBU0EsQ0FBQztZQUNoQmdCLE1BQU07WUFDTkQ7UUFDSjtJQUNKO0FBQ0o7QUFDQSxNQUFNRSx3QkFBd0IsQ0FBQ0MsVUFBVUM7SUFDckMsT0FBTyxPQUFPRCxhQUFhLGNBQWNDLFlBQVlDLEtBQUssQ0FBQ0MsV0FBVyxDQUFDSCxZQUFZQTtBQUN2RjtBQUNBLE1BQU1JLDJCQUEyQixDQUFDcEI7SUFDOUIsTUFBTXFCLFdBQVd0Qiw0QkFBNEJDO0lBQzdDLE1BQU1pQixjQUFjakIsS0FBS3NCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPLENBQUNQLFdBQVc7SUFDeEQsSUFBSSxDQUFDakIsS0FBS3lCLFdBQVcsRUFBRTtRQUNuQixPQUFPO1lBQ0gsR0FBR1Ysc0JBQXNCTSxVQUFVSjtRQUN2QztJQUNKO0lBQ0EsdUJBQXVCLEdBQUcsSUFBSUksWUFBWSxRQUFRLE9BQU9BLGFBQWEsWUFBWUssTUFBTUMsT0FBTyxDQUFDTixXQUFXO1FBQ3ZHLE1BQU0sSUFBSXZCLHNEQUFTQSxDQUFDO1lBQ2hCZ0IsTUFBTTtZQUNOYyxTQUFTO1FBQ2I7SUFDSjtJQUNBLE1BQU1WLFFBQVEsQ0FBQztJQUNmLElBQUksTUFBTVcsT0FBT1IsU0FBUztRQUN0QixNQUFNUyxJQUFJRDtRQUNWLE1BQU1iLFdBQVdLLFFBQVEsQ0FBQ1MsRUFBRTtRQUM1QixNQUFNQyxRQUFRaEIsc0JBQXNCQyxVQUFVQztRQUM5Q0MsS0FBSyxDQUFDWSxFQUFFLEdBQUdDO0lBQ2Y7SUFDQSxPQUFPYjtBQUNYO0FBRXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVyb0dyb3cvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvY29udGVudFR5cGUtNzc4YjMzYzMubWpzP2Q3OTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVCBhcyBUUlBDRXJyb3IgfSBmcm9tICcuL1RSUENFcnJvci02ODllNzlmMS5tanMnO1xuXG5mdW5jdGlvbiBnZXRSYXdQcm9jZWR1cmVJbnB1dE9yVGhyb3cob3B0cykge1xuICAgIGNvbnN0IHsgcmVxICB9ID0gb3B0cztcbiAgICB0cnkge1xuICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIGlmICghcmVxLnF1ZXJ5LmhhcygnaW5wdXQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByYXcgPSByZXEucXVlcnkuZ2V0KCdpbnB1dCcpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdHMucHJlcHJvY2Vzc2VkQm9keSAmJiB0eXBlb2YgcmVxLmJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBBIG11dGF0aW9uIHdpdGggbm8gaW5wdXRzIHdpbGwgaGF2ZSByZXEuYm9keSA9PT0gJydcbiAgICAgICAgICAgIHJldHVybiByZXEuYm9keS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBKU09OLnBhcnNlKHJlcS5ib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxLmJvZHk7XG4gICAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiAnUEFSU0VfRVJST1InLFxuICAgICAgICAgICAgY2F1c2VcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY29uc3QgZGVzZXJpYWxpemVJbnB1dFZhbHVlID0gKHJhd1ZhbHVlLCB0cmFuc2Zvcm1lcik9PntcbiAgICByZXR1cm4gdHlwZW9mIHJhd1ZhbHVlICE9PSAndW5kZWZpbmVkJyA/IHRyYW5zZm9ybWVyLmlucHV0LmRlc2VyaWFsaXplKHJhd1ZhbHVlKSA6IHJhd1ZhbHVlO1xufTtcbmNvbnN0IGdldEpzb25Db250ZW50VHlwZUlucHV0cyA9IChvcHRzKT0+e1xuICAgIGNvbnN0IHJhd0lucHV0ID0gZ2V0UmF3UHJvY2VkdXJlSW5wdXRPclRocm93KG9wdHMpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gb3B0cy5yb3V0ZXIuX2RlZi5fY29uZmlnLnRyYW5zZm9ybWVyO1xuICAgIGlmICghb3B0cy5pc0JhdGNoQ2FsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgMDogZGVzZXJpYWxpemVJbnB1dFZhbHVlKHJhd0lucHV0LCB0cmFuc2Zvcm1lcilcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqLyBpZiAocmF3SW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgcmF3SW5wdXQgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocmF3SW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUUlBDRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogJ0JBRF9SRVFVRVNUJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdcImlucHV0XCIgbmVlZHMgdG8gYmUgYW4gb2JqZWN0IHdoZW4gZG9pbmcgYSBiYXRjaCBjYWxsJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXQgPSB7fTtcbiAgICBmb3IoY29uc3Qga2V5IGluIHJhd0lucHV0KXtcbiAgICAgICAgY29uc3QgayA9IGtleTtcbiAgICAgICAgY29uc3QgcmF3VmFsdWUgPSByYXdJbnB1dFtrXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBkZXNlcmlhbGl6ZUlucHV0VmFsdWUocmF3VmFsdWUsIHRyYW5zZm9ybWVyKTtcbiAgICAgICAgaW5wdXRba10gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufTtcblxuZXhwb3J0IHsgZ2V0SnNvbkNvbnRlbnRUeXBlSW5wdXRzIGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJUIiwiVFJQQ0Vycm9yIiwiZ2V0UmF3UHJvY2VkdXJlSW5wdXRPclRocm93Iiwib3B0cyIsInJlcSIsIm1ldGhvZCIsInF1ZXJ5IiwiaGFzIiwidW5kZWZpbmVkIiwicmF3IiwiZ2V0IiwiSlNPTiIsInBhcnNlIiwicHJlcHJvY2Vzc2VkQm9keSIsImJvZHkiLCJsZW5ndGgiLCJjYXVzZSIsImNvZGUiLCJkZXNlcmlhbGl6ZUlucHV0VmFsdWUiLCJyYXdWYWx1ZSIsInRyYW5zZm9ybWVyIiwiaW5wdXQiLCJkZXNlcmlhbGl6ZSIsImdldEpzb25Db250ZW50VHlwZUlucHV0cyIsInJhd0lucHV0Iiwicm91dGVyIiwiX2RlZiIsIl9jb25maWciLCJpc0JhdGNoQ2FsbCIsIkFycmF5IiwiaXNBcnJheSIsIm1lc3NhZ2UiLCJrZXkiLCJrIiwidmFsdWUiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/contentType-778b33c3.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@trpc/server/dist/index-f91d720c.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   a: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   b: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   c: () => (/* binding */ createFlatProxy),\n/* harmony export */   g: () => (/* binding */ getHTTPStatusCodeFromError)\n/* harmony export */ });\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\nconst TRPC_ERROR_CODES_BY_NUMBER = (0,_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(_codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === \"number\") {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === \"apply\";\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== \"string\" || name === \"then\") {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvaW5kZXgtZjkxZDcyMGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpRjtBQUVqRixNQUFNSSw2QkFBNkJILHNEQUFNQSxDQUFDRSxrREFBdUJBO0FBQ2pFLE1BQU1FLHdCQUF3QjtJQUMxQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGNBQWM7SUFDZEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLHNCQUFzQjtJQUN0QkMsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLHFCQUFxQjtJQUNyQkMsbUJBQW1CO0lBQ25CQyx1QkFBdUI7SUFDdkJDLG1CQUFtQjtJQUNuQkMsdUJBQXVCO0lBQ3ZCQyx1QkFBdUI7SUFDdkJDLGlCQUFpQjtBQUNyQjtBQUNBLFNBQVNDLHFCQUFxQkMsSUFBSTtJQUM5QixPQUFPakIscUJBQXFCLENBQUNpQixLQUFLLElBQUk7QUFDMUM7QUFDQSxTQUFTQyxrQkFBa0JDLElBQUk7SUFDM0IsTUFBTUMsTUFBTUMsTUFBTUMsT0FBTyxDQUFDSCxRQUFRQSxPQUFPO1FBQ3JDQTtLQUNIO0lBQ0QsTUFBTUksZUFBZSxJQUFJQyxJQUFJSixJQUFJSyxHQUFHLENBQUMsQ0FBQ0M7UUFDbEMsSUFBSSxXQUFXQSxLQUFLO1lBQ2hCLE1BQU1DLE9BQU9ELElBQUlFLEtBQUssQ0FBQ0QsSUFBSTtZQUMzQixJQUFJLE9BQU9BLEtBQUtFLFVBQVUsS0FBSyxVQUFVO2dCQUNyQyxPQUFPRixLQUFLRSxVQUFVO1lBQzFCO1lBQ0EsTUFBTVosT0FBT2xCLDBCQUEwQixDQUFDMkIsSUFBSUUsS0FBSyxDQUFDWCxJQUFJLENBQUM7WUFDdkQsT0FBT0QscUJBQXFCQztRQUNoQztRQUNBLE9BQU87SUFDWDtJQUNBLElBQUlNLGFBQWFPLElBQUksS0FBSyxHQUFHO1FBQ3pCLE9BQU87SUFDWDtJQUNBLE1BQU1ELGFBQWFOLGFBQWFRLE1BQU0sR0FBR0MsSUFBSSxHQUFHQyxLQUFLO0lBQ3JELE9BQU9KO0FBQ1g7QUFDQSxTQUFTSywyQkFBMkJOLEtBQUs7SUFDckMsT0FBT1oscUJBQXFCWSxNQUFNWCxJQUFJO0FBQzFDO0FBRUEsTUFBTWtCLE9BQU87QUFDYixPQUFPO0FBQ1A7QUFDQSxTQUFTQyxpQkFBaUJDLFFBQVEsRUFBRUMsSUFBSTtJQUNwQyxNQUFNQyxRQUFRLElBQUlDLE1BQU1MLE1BQU07UUFDMUJNLEtBQUtDLElBQUksRUFBRUMsR0FBRztZQUNWLElBQUksT0FBT0EsUUFBUSxZQUFZQSxRQUFRLFFBQVE7Z0JBQzNDLHdEQUF3RDtnQkFDeEQsd0RBQXdEO2dCQUN4RCxPQUFPQztZQUNYO1lBQ0EsT0FBT1IsaUJBQWlCQyxVQUFVO21CQUMzQkM7Z0JBQ0hLO2FBQ0g7UUFDTDtRQUNBRSxPQUFPQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsSUFBSTtZQUNmLE1BQU1DLFVBQVVYLElBQUksQ0FBQ0EsS0FBS1ksTUFBTSxHQUFHLEVBQUUsS0FBSztZQUMxQyxPQUFPYixTQUFTO2dCQUNaVyxNQUFNQyxVQUFVRCxLQUFLRSxNQUFNLElBQUksSUFBSUYsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUdBO2dCQUNsRFYsTUFBTVcsVUFBVVgsS0FBS2EsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLYjtZQUN4QztRQUNKO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUFHLE1BQU1hLHVCQUF1QixDQUFDZixXQUFXRCxpQkFBaUJDLFVBQVUsRUFBRTtBQUMxRTs7OztDQUlDLEdBQUcsTUFBTWdCLGtCQUFrQixDQUFDaEI7SUFDekIsT0FBTyxJQUFJRyxNQUFNTCxNQUFNO1FBQ25CTSxLQUFLQyxJQUFJLEVBQUVZLElBQUk7WUFDWCxJQUFJLE9BQU9BLFNBQVMsWUFBWUEsU0FBUyxRQUFRO2dCQUM3Qyx3REFBd0Q7Z0JBQ3hELHdEQUF3RDtnQkFDeEQsT0FBT1Y7WUFDWDtZQUNBLE9BQU9QLFNBQVNpQjtRQUNwQjtJQUNKO0FBQ0o7QUFFcUoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZXJvR3Jvdy8uL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC9pbmRleC1mOTFkNzIwYy5tanM/MzUwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGludmVydCwgVCBhcyBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWSB9IGZyb20gJy4vY29kZXMtYzkyNGMzZGIubWpzJztcblxuY29uc3QgVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVIgPSBpbnZlcnQoVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkpO1xuY29uc3QgSlNPTlJQQzJfVE9fSFRUUF9DT0RFID0ge1xuICAgIFBBUlNFX0VSUk9SOiA0MDAsXG4gICAgQkFEX1JFUVVFU1Q6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBOT1RfRk9VTkQ6IDQwNCxcbiAgICBGT1JCSURERU46IDQwMyxcbiAgICBNRVRIT0RfTk9UX1NVUFBPUlRFRDogNDA1LFxuICAgIFRJTUVPVVQ6IDQwOCxcbiAgICBDT05GTElDVDogNDA5LFxuICAgIFBSRUNPTkRJVElPTl9GQUlMRUQ6IDQxMixcbiAgICBQQVlMT0FEX1RPT19MQVJHRTogNDEzLFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5jb25zdCBub29wID0gKCk9Pntcbi8vIG5vb3Bcbn07XG5mdW5jdGlvbiBjcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBwYXRoKSB7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkobm9vcCwge1xuICAgICAgICBnZXQgKF9vYmosIGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleSA9PT0gJ3RoZW4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBpZiB0aGUgcHJveHkgaXMgYWNjaWRlbnRhbGx5IHRyZWF0ZWRcbiAgICAgICAgICAgICAgICAvLyBsaWtlIGEgUHJvbWlzZUxpa2UgKGxpa2UgaW4gYFByb21pc2UucmVzb2x2ZShwcm94eSlgKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJQcm94eShjYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIC4uLnBhdGgsXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHkgKF8xLCBfMiwgYXJncykge1xuICAgICAgICAgICAgY29uc3QgaXNBcHBseSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PT0gJ2FwcGx5JztcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgYXJnczogaXNBcHBseSA/IGFyZ3MubGVuZ3RoID49IDIgPyBhcmdzWzFdIDogW10gOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlzQXBwbHkgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcHJveHkgdGhhdCBjYWxscyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcGF0aCBhbmQgYXJndW1lbnRzXG4gKlxuICogQGludGVybmFsXG4gKi8gY29uc3QgY3JlYXRlUmVjdXJzaXZlUHJveHkgPSAoY2FsbGJhY2spPT5jcmVhdGVJbm5lclByb3h5KGNhbGxiYWNrLCBbXSk7XG4vKipcbiAqIFVzZWQgaW4gcGxhY2Ugb2YgYG5ldyBQcm94eWAgd2hlcmUgZWFjaCBoYW5kbGVyIHdpbGwgbWFwIDEgbGV2ZWwgZGVlcCB0byBhbm90aGVyIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovIGNvbnN0IGNyZWF0ZUZsYXRQcm94eSA9IChjYWxsYmFjayk9PntcbiAgICByZXR1cm4gbmV3IFByb3h5KG5vb3AsIHtcbiAgICAgICAgZ2V0IChfb2JqLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUgPT09ICd0aGVuJykge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgaWYgdGhlIHByb3h5IGlzIGFjY2lkZW50YWxseSB0cmVhdGVkXG4gICAgICAgICAgICAgICAgLy8gbGlrZSBhIFByb21pc2VMaWtlIChsaWtlIGluIGBQcm9taXNlLnJlc29sdmUocHJveHkpYClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5leHBvcnQgeyBUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiBhcyBULCBjcmVhdGVSZWN1cnNpdmVQcm94eSBhcyBhLCBnZXRIVFRQU3RhdHVzQ29kZSBhcyBiLCBjcmVhdGVGbGF0UHJveHkgYXMgYywgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImkiLCJpbnZlcnQiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJUUlBDX0VSUk9SX0NPREVTX0JZX05VTUJFUiIsIkpTT05SUEMyX1RPX0hUVFBfQ09ERSIsIlBBUlNFX0VSUk9SIiwiQkFEX1JFUVVFU1QiLCJVTkFVVEhPUklaRUQiLCJOT1RfRk9VTkQiLCJGT1JCSURERU4iLCJNRVRIT0RfTk9UX1NVUFBPUlRFRCIsIlRJTUVPVVQiLCJDT05GTElDVCIsIlBSRUNPTkRJVElPTl9GQUlMRUQiLCJQQVlMT0FEX1RPT19MQVJHRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsInNpemUiLCJ2YWx1ZXMiLCJuZXh0IiwidmFsdWUiLCJnZXRIVFRQU3RhdHVzQ29kZUZyb21FcnJvciIsIm5vb3AiLCJjcmVhdGVJbm5lclByb3h5IiwiY2FsbGJhY2siLCJwYXRoIiwicHJveHkiLCJQcm94eSIsImdldCIsIl9vYmoiLCJrZXkiLCJ1bmRlZmluZWQiLCJhcHBseSIsIl8xIiwiXzIiLCJhcmdzIiwiaXNBcHBseSIsImxlbmd0aCIsInNsaWNlIiwiY3JlYXRlUmVjdXJzaXZlUHJveHkiLCJjcmVhdGVGbGF0UHJveHkiLCJuYW1lIiwiYSIsImIiLCJjIiwiZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@trpc/server/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* reexport safe */ _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   callProcedure: () => (/* reexport safe */ _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   createInputMiddleware: () => (/* binding */ createInputMiddleware),\n/* harmony export */   createOutputMiddleware: () => (/* binding */ createOutputMiddleware),\n/* harmony export */   defaultTransformer: () => (/* reexport safe */ _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   experimental_standaloneMiddleware: () => (/* binding */ experimental_standaloneMiddleware),\n/* harmony export */   getDataTransformer: () => (/* reexport safe */ _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* reexport safe */ _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   initTRPC: () => (/* binding */ initTRPC),\n/* harmony export */   procedureTypes: () => (/* reexport safe */ _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   router: () => (/* binding */ router)\n/* harmony export */ });\n/* harmony import */ var _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-00ffd309.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/config-00ffd309.mjs\");\n/* harmony import */ var _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-689e79f1.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n\n\n\n\n/**\n * @deprecated\n */ const middlewareMarker$1 = \"middlewareMarker\";\nfunction getParseFn$1(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ProcedureParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ProcedureParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ProcedureParserZodEsque\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ProcedureParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ProcedureParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @internal\n * @deprecated\n */ class Procedure {\n    _def() {\n        return {\n            middlewares: this.middlewares,\n            resolver: this.resolver,\n            inputParser: this.inputParser,\n            outputParser: this.outputParser,\n            meta: this.meta\n        };\n    }\n    async parseInput(rawInput) {\n        try {\n            return await this.parseInputFn(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n    }\n    async parseOutput(rawOutput) {\n        try {\n            return await this.parseOutputFn(rawOutput);\n        } catch (cause) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause,\n                message: \"Output validation failed\"\n            });\n        }\n    }\n    /**\n   * Trigger middlewares in order, parse raw input, call resolver & parse raw output\n   * @internal\n   */ async call(opts) {\n        // wrap the actual resolver and treat as the last \"middleware\"\n        const middlewaresWithResolver = this.middlewares.concat([\n            async ({ ctx })=>{\n                const input = await this.parseInput(opts.rawInput);\n                const rawOutput = await this.resolver({\n                    ...opts,\n                    ctx,\n                    input\n                });\n                const data = await this.parseOutput(rawOutput);\n                return {\n                    marker: middlewareMarker$1,\n                    ok: true,\n                    data,\n                    ctx\n                };\n            }\n        ]);\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const result = await middlewaresWithResolver[callOpts.index]({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    rawInput: opts.rawInput,\n                    meta: this.meta,\n                    next: async (nextOpts)=>{\n                        return await callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts ? nextOpts.ctx : callOpts.ctx\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ctx: callOpts.ctx,\n                    ok: false,\n                    error: (0,_TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker$1\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    }\n    /**\n   * Create new procedure with passed middlewares\n   * @param middlewares\n   */ inheritMiddlewares(middlewares) {\n        const Constructor = this.constructor;\n        const instance = new Constructor({\n            middlewares: [\n                ...middlewares,\n                ...this.middlewares\n            ],\n            resolver: this.resolver,\n            inputParser: this.inputParser,\n            outputParser: this.outputParser,\n            meta: this.meta\n        });\n        return instance;\n    }\n    constructor(opts){\n        this.middlewares = opts.middlewares;\n        this.resolver = opts.resolver;\n        this.inputParser = opts.inputParser;\n        this.parseInputFn = getParseFn$1(this.inputParser);\n        this.outputParser = opts.outputParser;\n        this.parseOutputFn = getParseFn$1(this.outputParser);\n        this.meta = opts.meta;\n    }\n}\nfunction createProcedure(opts) {\n    const inputParser = \"input\" in opts ? opts.input : (input)=>{\n        if (input != null) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                message: \"No input expected\"\n            });\n        }\n        return undefined;\n    };\n    const outputParser = \"output\" in opts && opts.output ? opts.output : (output)=>output;\n    return new Procedure({\n        inputParser: inputParser,\n        resolver: opts.resolve,\n        middlewares: [],\n        outputParser: outputParser,\n        meta: opts.meta\n    });\n}\nfunction getParseFn(procedureParser) {\n    const parser = procedureParser;\n    if (typeof parser === \"function\") {\n        // ParserCustomValidatorEsque\n        return parser;\n    }\n    if (typeof parser.parseAsync === \"function\") {\n        // ParserZodEsque\n        return parser.parseAsync.bind(parser);\n    }\n    if (typeof parser.parse === \"function\") {\n        // ParserZodEsque\n        // ParserValibotEsque (<= v0.12.X)\n        return parser.parse.bind(parser);\n    }\n    if (typeof parser.validateSync === \"function\") {\n        // ParserYupEsque\n        return parser.validateSync.bind(parser);\n    }\n    if (typeof parser.create === \"function\") {\n        // ParserSuperstructEsque\n        return parser.create.bind(parser);\n    }\n    if (typeof parser.assert === \"function\") {\n        // ParserScaleEsque\n        return (value)=>{\n            parser.assert(value);\n            return value;\n        };\n    }\n    throw new Error(\"Could not find a validator fn\");\n}\n/**\n * @deprecated only for backwards compat\n * @internal\n */ function getParseFnOrPassThrough(procedureParser) {\n    if (!procedureParser) {\n        return (v)=>v;\n    }\n    return getParseFn(procedureParser);\n}\n/**\n * Ensures there are no duplicate keys when building a procedure.\n */ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs){\n        for(const key in overrides){\n            if (key in newObj && newObj[key] !== overrides[key]) {\n                throw new Error(`Duplicate key ${key}`);\n            }\n            newObj[key] = overrides[key];\n        }\n    }\n    return newObj;\n}\n/**\n * @internal\n */ function createMiddlewareFactory() {\n    function createMiddlewareInner(middlewares) {\n        return {\n            _middlewares: middlewares,\n            unstable_pipe (middlewareBuilderOrFn) {\n                const pipedMiddleware = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                    middlewareBuilderOrFn\n                ];\n                return createMiddlewareInner([\n                    ...middlewares,\n                    ...pipedMiddleware\n                ]);\n            }\n        };\n    }\n    function createMiddleware(fn) {\n        return createMiddlewareInner([\n            fn\n        ]);\n    }\n    return createMiddleware;\n}\nconst experimental_standaloneMiddleware = ()=>({\n        create: createMiddlewareFactory()\n    });\nfunction isPlainObject(obj) {\n    return obj && typeof obj === \"object\" && !Array.isArray(obj);\n}\n/**\n * @internal\n * Please note, `trpc-openapi` uses this function.\n */ function createInputMiddleware(parse) {\n    const inputMiddleware = async ({ next, rawInput, input })=>{\n        let parsedInput;\n        try {\n            parsedInput = await parse(rawInput);\n        } catch (cause) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n        // Multiple input parsers\n        const combinedInput = isPlainObject(input) && isPlainObject(parsedInput) ? {\n            ...input,\n            ...parsedInput\n        } : parsedInput;\n        // TODO fix this typing?\n        return next({\n            input: combinedInput\n        });\n    };\n    inputMiddleware._type = \"input\";\n    return inputMiddleware;\n}\n/**\n * @internal\n */ function createOutputMiddleware(parse) {\n    const outputMiddleware = async ({ next })=>{\n        const result = await next();\n        if (!result.ok) {\n            // pass through failures without validating\n            return result;\n        }\n        try {\n            const data = await parse(result.data);\n            return {\n                ...result,\n                data\n            };\n        } catch (cause) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause\n            });\n        }\n    };\n    outputMiddleware._type = \"output\";\n    return outputMiddleware;\n}\n/**\n * @internal\n */ const middlewareMarker = \"middlewareMarker\";\nfunction createNewBuilder(def1, def2) {\n    const { middlewares = [], inputs, meta, ...rest } = def2;\n    // TODO: maybe have a fn here to warn about calls\n    return createBuilder({\n        ...mergeWithoutOverrides(def1, rest),\n        inputs: [\n            ...def1.inputs,\n            ...inputs ?? []\n        ],\n        middlewares: [\n            ...def1.middlewares,\n            ...middlewares\n        ],\n        meta: def1.meta && meta ? {\n            ...def1.meta,\n            ...meta\n        } : meta ?? def1.meta\n    });\n}\nfunction createBuilder(initDef = {}) {\n    const _def = {\n        inputs: [],\n        middlewares: [],\n        ...initDef\n    };\n    return {\n        _def,\n        input (input) {\n            const parser = getParseFn(input);\n            return createNewBuilder(_def, {\n                inputs: [\n                    input\n                ],\n                middlewares: [\n                    createInputMiddleware(parser)\n                ]\n            });\n        },\n        output (output) {\n            const parseOutput = getParseFn(output);\n            return createNewBuilder(_def, {\n                output,\n                middlewares: [\n                    createOutputMiddleware(parseOutput)\n                ]\n            });\n        },\n        meta (meta) {\n            return createNewBuilder(_def, {\n                meta: meta\n            });\n        },\n        /**\n     * @deprecated\n     * This functionality is deprecated and will be removed in the next major version.\n     */ unstable_concat (builder) {\n            return createNewBuilder(_def, builder._def);\n        },\n        use (middlewareBuilderOrFn) {\n            // Distinguish between a middleware builder and a middleware function\n            const middlewares = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                middlewareBuilderOrFn\n            ];\n            return createNewBuilder(_def, {\n                middlewares: middlewares\n            });\n        },\n        query (resolver) {\n            return createResolver({\n                ..._def,\n                query: true\n            }, resolver);\n        },\n        mutation (resolver) {\n            return createResolver({\n                ..._def,\n                mutation: true\n            }, resolver);\n        },\n        subscription (resolver) {\n            return createResolver({\n                ..._def,\n                subscription: true\n            }, resolver);\n        }\n    };\n}\nfunction createResolver(_def, resolver) {\n    const finalBuilder = createNewBuilder(_def, {\n        resolver,\n        middlewares: [\n            async function resolveMiddleware(opts) {\n                const data = await resolver(opts);\n                return {\n                    marker: middlewareMarker,\n                    ok: true,\n                    data,\n                    ctx: opts.ctx\n                };\n            }\n        ]\n    });\n    return createProcedureCaller(finalBuilder._def);\n}\nconst codeblock = `\nIf you want to call this function on the server, you do the following:\nThis is a client-only function.\n\nconst caller = appRouter.createCaller({\n  /* ... your context */\n});\n\nconst result = await caller.call('myProcedure', input);\n`.trim();\nfunction createProcedureCaller(_def) {\n    const procedure = async function resolve(opts) {\n        // is direct server-side call\n        if (!opts || !(\"rawInput\" in opts)) {\n            throw new Error(codeblock);\n        }\n        // run the middlewares recursively with the resolver as the last one\n        const callRecursive = async (callOpts = {\n            index: 0,\n            ctx: opts.ctx\n        })=>{\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const middleware = _def.middlewares[callOpts.index];\n                const result = await middleware({\n                    ctx: callOpts.ctx,\n                    type: opts.type,\n                    path: opts.path,\n                    rawInput: callOpts.rawInput ?? opts.rawInput,\n                    meta: _def.meta,\n                    input: callOpts.input,\n                    next (_nextOpts) {\n                        const nextOpts = _nextOpts;\n                        return callRecursive({\n                            index: callOpts.index + 1,\n                            ctx: nextOpts && \"ctx\" in nextOpts ? {\n                                ...callOpts.ctx,\n                                ...nextOpts.ctx\n                            } : callOpts.ctx,\n                            input: nextOpts && \"input\" in nextOpts ? nextOpts.input : callOpts.input,\n                            rawInput: nextOpts && \"rawInput\" in nextOpts ? nextOpts.rawInput : callOpts.rawInput\n                        });\n                    }\n                });\n                return result;\n            } catch (cause) {\n                return {\n                    ok: false,\n                    error: (0,_TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause),\n                    marker: middlewareMarker\n                };\n            }\n        };\n        // there's always at least one \"next\" since we wrap this.resolver in a middleware\n        const result = await callRecursive();\n        if (!result) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"No result from middlewares - did you forget to `return next()`?\"\n            });\n        }\n        if (!result.ok) {\n            // re-throw original error\n            throw result.error;\n        }\n        return result.data;\n    };\n    procedure._def = _def;\n    procedure.meta = _def.meta;\n    return procedure;\n}\nfunction migrateProcedure(oldProc, type) {\n    const def = oldProc._def();\n    const inputParser = getParseFnOrPassThrough(def.inputParser);\n    const outputParser = getParseFnOrPassThrough(def.outputParser);\n    const inputMiddleware = createInputMiddleware(inputParser);\n    const builder = createBuilder({\n        inputs: [\n            def.inputParser\n        ],\n        middlewares: [\n            ...def.middlewares,\n            inputMiddleware,\n            createOutputMiddleware(outputParser)\n        ],\n        meta: def.meta,\n        output: def.outputParser,\n        mutation: type === \"mutation\",\n        query: type === \"query\",\n        subscription: type === \"subscription\"\n    });\n    const proc = builder[type]((opts)=>def.resolver(opts));\n    return proc;\n}\nfunction migrateRouter(oldRouter) {\n    const errorFormatter = oldRouter._def.errorFormatter;\n    const transformer = oldRouter._def.transformer;\n    const queries = {};\n    const mutations = {};\n    const subscriptions = {};\n    for (const [name, procedure] of Object.entries(oldRouter._def.queries)){\n        queries[name] = migrateProcedure(procedure, \"query\");\n    }\n    for (const [name1, procedure1] of Object.entries(oldRouter._def.mutations)){\n        mutations[name1] = migrateProcedure(procedure1, \"mutation\");\n    }\n    for (const [name2, procedure2] of Object.entries(oldRouter._def.subscriptions)){\n        subscriptions[name2] = migrateProcedure(procedure2, \"subscription\");\n    }\n    const procedures = mergeWithoutOverrides(queries, mutations, subscriptions);\n    const newRouter = (0,_config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        transformer,\n        errorFormatter,\n        isDev: \"development\" !== \"production\"\n    })(procedures);\n    return newRouter;\n}\nfunction getDataTransformer(transformer) {\n    if (\"input\" in transformer) {\n        return transformer;\n    }\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\nconst PROCEDURE_DEFINITION_MAP = {\n    query: \"queries\",\n    mutation: \"mutations\",\n    subscription: \"subscriptions\"\n};\nfunction safeObject(...args) {\n    return Object.assign(Object.create(null), ...args);\n}\n/**\n * @internal The type signature of this class may change without warning.\n * @deprecated\n */ class Router {\n    static prefixProcedures(procedures, prefix) {\n        const eps = safeObject();\n        for (const [key, procedure] of Object.entries(procedures)){\n            eps[prefix + key] = procedure;\n        }\n        return eps;\n    }\n    query(path, procedure) {\n        const router = new Router({\n            queries: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    mutation(path, procedure) {\n        const router = new Router({\n            mutations: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    subscription(path, procedure) {\n        const router = new Router({\n            subscriptions: safeObject({\n                [path]: createProcedure(procedure)\n            })\n        });\n        return this.merge(router);\n    }\n    merge(prefixOrRouter, maybeRouter) {\n        let prefix = \"\";\n        let childRouter;\n        if (typeof prefixOrRouter === \"string\" && maybeRouter instanceof Router) {\n            prefix = prefixOrRouter;\n            childRouter = maybeRouter;\n        } else if (prefixOrRouter instanceof Router) {\n            childRouter = prefixOrRouter;\n        } else {\n            throw new Error(\"Invalid args\");\n        }\n        const duplicateQueries = Object.keys(childRouter._def.queries).filter((key)=>!!this._def.queries[prefix + key]);\n        const duplicateMutations = Object.keys(childRouter._def.mutations).filter((key)=>!!this._def.mutations[prefix + key]);\n        const duplicateSubscriptions = Object.keys(childRouter._def.subscriptions).filter((key)=>!!this._def.subscriptions[prefix + key]);\n        const duplicates = [\n            ...duplicateQueries,\n            ...duplicateMutations,\n            ...duplicateSubscriptions\n        ];\n        if (duplicates.length) {\n            throw new Error(`Duplicate endpoint(s): ${duplicates.join(\", \")}`);\n        }\n        const mergeProcedures = (defs)=>{\n            const newDefs = safeObject();\n            for (const [key, procedure] of Object.entries(defs)){\n                const newProcedure = procedure.inheritMiddlewares(this._def.middlewares);\n                newDefs[key] = newProcedure;\n            }\n            return Router.prefixProcedures(newDefs, prefix);\n        };\n        return new Router({\n            ...this._def,\n            queries: safeObject(this._def.queries, mergeProcedures(childRouter._def.queries)),\n            mutations: safeObject(this._def.mutations, mergeProcedures(childRouter._def.mutations)),\n            subscriptions: safeObject(this._def.subscriptions, mergeProcedures(childRouter._def.subscriptions))\n        });\n    }\n    /**\n   * Invoke procedure. Only for internal use within library.\n   */ async call(opts) {\n        const { type, path } = opts;\n        const defTarget = PROCEDURE_DEFINITION_MAP[type];\n        const defs = this._def[defTarget];\n        const procedure = defs[path];\n        if (!procedure) {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                code: \"NOT_FOUND\",\n                message: `No \"${type}\"-procedure on path \"${path}\"`\n            });\n        }\n        return procedure.call(opts);\n    }\n    createCaller(ctx) {\n        return {\n            query: (path, ...args)=>{\n                return this.call({\n                    type: \"query\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            },\n            mutation: (path, ...args)=>{\n                return this.call({\n                    type: \"mutation\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            },\n            subscription: (path, ...args)=>{\n                return this.call({\n                    type: \"subscription\",\n                    ctx,\n                    path,\n                    rawInput: args[0]\n                });\n            }\n        };\n    }\n    /**\n   * Function to be called before any procedure is invoked\n   * @link https://trpc.io/docs/middlewares\n   */ middleware(middleware) {\n        return new Router({\n            ...this._def,\n            middlewares: [\n                ...this._def.middlewares,\n                middleware\n            ]\n        });\n    }\n    /**\n   * Format errors\n   * @link https://trpc.io/docs/error-formatting\n   */ formatError(errorFormatter) {\n        if (this._def.errorFormatter !== _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            throw new Error(\"You seem to have double `formatError()`-calls in your router tree\");\n        }\n        return new Router({\n            ...this._def,\n            errorFormatter: errorFormatter\n        });\n    }\n    getErrorShape(opts) {\n        const { path, error } = opts;\n        const { code } = opts.error;\n        const shape = {\n            message: error.message,\n            code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_3__.T[code],\n            data: {\n                code,\n                httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(error)\n            }\n        };\n        if (globalThis.process?.env?.NODE_ENV !== \"production\" && typeof opts.error.stack === \"string\") {\n            shape.data.stack = opts.error.stack;\n        }\n        if (typeof path === \"string\") {\n            shape.data.path = path;\n        }\n        return this._def.errorFormatter({\n            ...opts,\n            shape\n        });\n    }\n    /**\n   * Add data transformer to serialize/deserialize input args + output\n   * @link https://trpc.io/docs/data-transformers\n   */ transformer(_transformer) {\n        const transformer = getDataTransformer(_transformer);\n        if (this._def.transformer !== _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            throw new Error(\"You seem to have double `transformer()`-calls in your router tree\");\n        }\n        return new Router({\n            ...this._def,\n            transformer\n        });\n    }\n    /**\n   * Flattens the generics of TQueries/TMutations/TSubscriptions.\n   * ⚠️ Experimental - might disappear. ⚠️\n   *\n   * @alpha\n   */ flat() {\n        return this;\n    }\n    /**\n   * Interop mode for v9.x -> v10.x\n   */ interop() {\n        return migrateRouter(this);\n    }\n    constructor(def){\n        this._def = {\n            queries: def?.queries ?? safeObject(),\n            mutations: def?.mutations ?? safeObject(),\n            subscriptions: def?.subscriptions ?? safeObject(),\n            middlewares: def?.middlewares ?? [],\n            errorFormatter: def?.errorFormatter ?? _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.d,\n            transformer: def?.transformer ?? _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a\n        };\n    }\n}\n/**\n * @deprecated\n */ function router() {\n    return new Router();\n}\nfunction mergeRouters(...routerList) {\n    const record = mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.d) {\n            if (currentErrorFormatter !== _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.d && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n                throw new Error(\"You seem to have several error formatters\");\n            }\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.d);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a) {\n            if (prev !== _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a && prev !== current._def._config.transformer) {\n                throw new Error(\"You seem to have several transformers\");\n            }\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n    const router = (0,_config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n        errorFormatter,\n        transformer,\n        isDev: routerList.some((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.some((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.some((r)=>r._def._config.isServer),\n        $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n}\n/**\n * TODO: This can be improved:\n * - We should be able to chain `.meta()`/`.context()` only once\n * - Simplify typings\n * - Doesn't need to be a class but it doesn't really hurt either\n */ class TRPCBuilder {\n    context() {\n        return new TRPCBuilder();\n    }\n    meta() {\n        return new TRPCBuilder();\n    }\n    create(options) {\n        return createTRPCInner()(options);\n    }\n}\n/**\n * Initialize tRPC - done exactly once per backend\n */ const initTRPC = new TRPCBuilder();\nfunction createTRPCInner() {\n    return function initTRPCInner(runtime) {\n        const errorFormatter = runtime?.errorFormatter ?? _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.d;\n        const transformer = (0,_config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(runtime?.transformer ?? _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.a);\n        const config = {\n            transformer,\n            isDev: runtime?.isDev ?? globalThis.process?.env?.NODE_ENV !== \"production\",\n            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,\n            errorFormatter,\n            isServer: runtime?.isServer ?? _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.i,\n            /**\n       * @internal\n       */ $types: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_2__.c)((key)=>{\n                throw new Error(`Tried to access \"$types.${key}\" which is not available at runtime`);\n            })\n        };\n        {\n            // Server check\n            const isServer = runtime?.isServer ?? _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.i;\n            if (!isServer && runtime?.allowOutsideOfServer !== true) {\n                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);\n            }\n        }\n        return {\n            /**\n       * These are just types, they can't be used\n       * @internal\n       */ _config: config,\n            /**\n       * Builder object for creating procedures\n       */ procedure: createBuilder({\n                meta: runtime?.defaultMeta\n            }),\n            /**\n       * Create reusable middlewares\n       */ middleware: createMiddlewareFactory(),\n            /**\n       * Create a router\n       */ router: (0,_config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(config),\n            /**\n       * Merge Routers\n       */ mergeRouters\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/resolveHTTPResponse-cd1a9112.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/resolveHTTPResponse-cd1a9112.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   r: () => (/* binding */ resolveHTTPResponse)\n/* harmony export */ });\n/* harmony import */ var _config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-00ffd309.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/config-00ffd309.mjs\");\n/* harmony import */ var _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCError-689e79f1.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/TRPCError-689e79f1.mjs\");\n/* harmony import */ var _transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformTRPCResponse-1153b421.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\");\n/* harmony import */ var _contentType_778b33c3_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contentType-778b33c3.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/contentType-778b33c3.mjs\");\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n\n\n\n\n\nconst HTTP_METHOD_PROCEDURE_TYPE_MAP = {\n    GET: \"query\",\n    POST: \"mutation\"\n};\nconst fallbackContentTypeHandler = {\n    getInputs: _contentType_778b33c3_mjs__WEBPACK_IMPORTED_MODULE_3__.g\n};\nfunction initResponse(initOpts) {\n    const { ctx, paths, type, responseMeta, untransformedJSON, errors = [] } = initOpts;\n    let status = untransformedJSON ? (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_4__.b)(untransformedJSON) : 200;\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n    const eagerGeneration = !untransformedJSON;\n    const data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [\n        untransformedJSON\n    ];\n    const meta = responseMeta?.({\n        ctx,\n        paths,\n        type,\n        data,\n        errors,\n        eagerGeneration\n    }) ?? {};\n    for (const [key, value] of Object.entries(meta.headers ?? {})){\n        headers[key] = value;\n    }\n    if (meta.status) {\n        status = meta.status;\n    }\n    return {\n        status,\n        headers\n    };\n}\nasync function inputToProcedureCall(procedureOpts) {\n    const { opts, ctx, type, input, path } = procedureOpts;\n    try {\n        const data = await (0,_config_00ffd309_mjs__WEBPACK_IMPORTED_MODULE_0__.b)({\n            procedures: opts.router._def.procedures,\n            path,\n            rawInput: input,\n            ctx,\n            type\n        });\n        return {\n            result: {\n                data\n            }\n        };\n    } catch (cause) {\n        const error = (0,_TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause);\n        opts.onError?.({\n            error,\n            path,\n            input,\n            ctx,\n            type: type,\n            req: opts.req\n        });\n        return {\n            error: (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.g)({\n                config: opts.router._def._config,\n                error,\n                type,\n                path,\n                input,\n                ctx\n            })\n        };\n    }\n}\nfunction caughtErrorToData(cause, errorOpts) {\n    const { router, req, onError } = errorOpts.opts;\n    const error = (0,_TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(cause);\n    onError?.({\n        error,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx,\n        type: errorOpts.type,\n        req\n    });\n    const untransformedJSON = {\n        error: (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.g)({\n            config: router._def._config,\n            error,\n            type: errorOpts.type,\n            path: errorOpts.path,\n            input: errorOpts.input,\n            ctx: errorOpts.ctx\n        })\n    };\n    const transformedJSON = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(router._def._config, untransformedJSON);\n    const body = JSON.stringify(transformedJSON);\n    return {\n        error,\n        untransformedJSON,\n        body\n    };\n}\n// implementation\nasync function resolveHTTPResponse(opts) {\n    const { router, req, unstable_onHead, unstable_onChunk } = opts;\n    if (req.method === \"HEAD\") {\n        // can be used for lambda warmup\n        const headResponse = {\n            status: 204\n        };\n        unstable_onHead?.(headResponse, false);\n        unstable_onChunk?.([\n            -1,\n            \"\"\n        ]);\n        return headResponse;\n    }\n    const contentTypeHandler = opts.contentTypeHandler ?? fallbackContentTypeHandler;\n    const batchingEnabled = opts.batching?.enabled ?? true;\n    const type = HTTP_METHOD_PROCEDURE_TYPE_MAP[req.method] ?? \"unknown\";\n    let ctx = undefined;\n    let paths;\n    const isBatchCall = !!req.query.get(\"batch\");\n    const isStreamCall = isBatchCall && unstable_onHead && unstable_onChunk && req.headers[\"trpc-batch-mode\"] === \"stream\";\n    try {\n        // we create context first so that (unless `createContext()` throws)\n        // error handler may access context information\n        //\n        // this way even if the client sends malformed input that might cause an exception:\n        //  - `opts.error` has value,\n        //  - batching is not enabled,\n        //  - `type` is unknown,\n        //  - `getInputs` throws because of malformed JSON,\n        // context value is still available to the error handler\n        ctx = await opts.createContext();\n        if (opts.error) {\n            throw opts.error;\n        }\n        if (isBatchCall && !batchingEnabled) {\n            throw new Error(`Batching is not enabled on the server`);\n        }\n        /* istanbul ignore if -- @preserve */ if (type === \"subscription\") {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: \"Subscriptions should use wsLink\",\n                code: \"METHOD_NOT_SUPPORTED\"\n            });\n        }\n        if (type === \"unknown\") {\n            throw new _TRPCError_689e79f1_mjs__WEBPACK_IMPORTED_MODULE_1__.T({\n                message: `Unexpected request method ${req.method}`,\n                code: \"METHOD_NOT_SUPPORTED\"\n            });\n        }\n        const inputs = await contentTypeHandler.getInputs({\n            isBatchCall,\n            req,\n            router,\n            preprocessedBody: opts.preprocessedBody ?? false\n        });\n        paths = isBatchCall ? decodeURIComponent(opts.path).split(\",\") : [\n            opts.path\n        ];\n        const promises = paths.map((path, index)=>inputToProcedureCall({\n                opts,\n                ctx,\n                type,\n                input: inputs[index],\n                path\n            }));\n        if (!isStreamCall) {\n            /**\n       * Non-streaming response:\n       * - await all responses in parallel, blocking on the slowest one\n       * - create headers with known response body\n       * - return a complete HTTPResponse\n       */ const untransformedJSON = await Promise.all(promises);\n            const errors = untransformedJSON.flatMap((response)=>\"error\" in response ? [\n                    response.error\n                ] : []);\n            const headResponse1 = initResponse({\n                ctx,\n                paths,\n                type,\n                responseMeta: opts.responseMeta,\n                untransformedJSON,\n                errors\n            });\n            unstable_onHead?.(headResponse1, false);\n            // return body stuff\n            const result = isBatchCall ? untransformedJSON : untransformedJSON[0]; // eslint-disable-line @typescript-eslint/no-non-null-assertion -- `untransformedJSON` should be the length of `paths` which should be at least 1 otherwise there wouldn't be a request at all\n            const transformedJSON = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(router._def._config, result);\n            const body = JSON.stringify(transformedJSON);\n            unstable_onChunk?.([\n                -1,\n                body\n            ]);\n            return {\n                status: headResponse1.status,\n                headers: headResponse1.headers,\n                body\n            };\n        }\n        /**\n     * Streaming response:\n     * - block on none, call `onChunk` as soon as each response is ready\n     * - create headers with minimal data (cannot know the response body in advance)\n     * - return void\n     */ const headResponse2 = initResponse({\n            ctx,\n            paths,\n            type,\n            responseMeta: opts.responseMeta\n        });\n        unstable_onHead(headResponse2, true);\n        const indexedPromises = new Map(promises.map((promise, index)=>[\n                index,\n                promise.then((r)=>[\n                        index,\n                        r\n                    ])\n            ]));\n        for (const _ of paths){\n            const [index, untransformedJSON1] = await Promise.race(indexedPromises.values());\n            indexedPromises.delete(index);\n            try {\n                const transformedJSON1 = (0,_transformTRPCResponse_1153b421_mjs__WEBPACK_IMPORTED_MODULE_2__.t)(router._def._config, untransformedJSON1);\n                const body1 = JSON.stringify(transformedJSON1);\n                unstable_onChunk([\n                    index,\n                    body1\n                ]);\n            } catch (cause) {\n                const path = paths[index];\n                const input = inputs[index];\n                const { body: body2 } = caughtErrorToData(cause, {\n                    opts,\n                    ctx,\n                    type,\n                    path,\n                    input\n                });\n                unstable_onChunk([\n                    index,\n                    body2\n                ]);\n            }\n        }\n        return;\n    } catch (cause1) {\n        // we get here if\n        // - batching is called when it's not enabled\n        // - `createContext()` throws\n        // - `router._def._config.transformer.output.serialize()` throws\n        // - post body is too large\n        // - input deserialization fails\n        // - `errorFormatter` return value is malformed\n        const { error, untransformedJSON: untransformedJSON2, body: body3 } = caughtErrorToData(cause1, {\n            opts,\n            ctx,\n            type\n        });\n        const headResponse3 = initResponse({\n            ctx,\n            paths,\n            type,\n            responseMeta: opts.responseMeta,\n            untransformedJSON: untransformedJSON2,\n            errors: [\n                error\n            ]\n        });\n        unstable_onHead?.(headResponse3, false);\n        unstable_onChunk?.([\n            -1,\n            body3\n        ]);\n        return {\n            status: headResponse3.status,\n            headers: headResponse3.headers,\n            body: body3\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/resolveHTTPResponse-cd1a9112.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getErrorShape),\n/* harmony export */   t: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-f91d720c.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/index-f91d720c.mjs\");\n/* harmony import */ var _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codes-c924c3db.mjs */ \"(rsc)/./node_modules/@trpc/server/dist/codes-c924c3db.mjs\");\n\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _codes_c924c3db_mjs__WEBPACK_IMPORTED_MODULE_1__.T[code],\n        data: {\n            code,\n            httpStatus: (0,_index_f91d720c_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === \"string\") {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if (\"data\" in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVFO0FBQ0g7QUFFcEU7O0NBRUMsR0FBRyxTQUFTSSxjQUFjQyxJQUFJO0lBQzNCLE1BQU0sRUFBRUMsSUFBSSxFQUFHQyxLQUFLLEVBQUdDLE1BQU0sRUFBRyxHQUFHSDtJQUNuQyxNQUFNLEVBQUVJLElBQUksRUFBRyxHQUFHSixLQUFLRSxLQUFLO0lBQzVCLE1BQU1HLFFBQVE7UUFDVkMsU0FBU0osTUFBTUksT0FBTztRQUN0QkYsTUFBTU4sa0RBQXVCLENBQUNNLEtBQUs7UUFDbkNHLE1BQU07WUFDRkg7WUFDQUksWUFBWVosc0RBQTBCQSxDQUFDTTtRQUMzQztJQUNKO0lBQ0EsSUFBSUMsT0FBT00sS0FBSyxJQUFJLE9BQU9ULEtBQUtFLEtBQUssQ0FBQ1EsS0FBSyxLQUFLLFVBQVU7UUFDdERMLE1BQU1FLElBQUksQ0FBQ0csS0FBSyxHQUFHVixLQUFLRSxLQUFLLENBQUNRLEtBQUs7SUFDdkM7SUFDQSxJQUFJLE9BQU9ULFNBQVMsVUFBVTtRQUMxQkksTUFBTUUsSUFBSSxDQUFDTixJQUFJLEdBQUdBO0lBQ3RCO0lBQ0EsT0FBT0UsT0FBT1EsY0FBYyxDQUFDO1FBQ3pCLEdBQUdYLElBQUk7UUFDUEs7SUFDSjtBQUNKO0FBRUEsU0FBU08sMEJBQTBCVCxNQUFNLEVBQUVVLElBQUk7SUFDM0MsSUFBSSxXQUFXQSxNQUFNO1FBQ2pCLE9BQU87WUFDSCxHQUFHQSxJQUFJO1lBQ1BYLE9BQU9DLE9BQU9XLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNILEtBQUtYLEtBQUs7UUFDekQ7SUFDSjtJQUNBLElBQUksVUFBVVcsS0FBS0ksTUFBTSxFQUFFO1FBQ3ZCLE9BQU87WUFDSCxHQUFHSixJQUFJO1lBQ1BJLFFBQVE7Z0JBQ0osR0FBR0osS0FBS0ksTUFBTTtnQkFDZFYsTUFBTUosT0FBT1csV0FBVyxDQUFDQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0gsS0FBS0ksTUFBTSxDQUFDVixJQUFJO1lBQzlEO1FBQ0o7SUFDSjtJQUNBLE9BQU9NO0FBQ1g7QUFDQTs7RUFFRSxHQUFHLFNBQVNLLHNCQUFzQmYsTUFBTSxFQUFFZ0IsV0FBVztJQUNuRCxPQUFPQyxNQUFNQyxPQUFPLENBQUNGLGVBQWVBLFlBQVlHLEdBQUcsQ0FBQyxDQUFDVCxPQUFPRCwwQkFBMEJULFFBQVFVLFNBQVNELDBCQUEwQlQsUUFBUWdCO0FBQzdJO0FBRTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWVyb0dyb3cvLi9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlLTExNTNiNDIxLm1qcz9mM2I0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICcuL2luZGV4LWY5MWQ3MjBjLm1qcyc7XG5pbXBvcnQgeyBUIGFzIFRSUENfRVJST1JfQ09ERVNfQllfS0VZIH0gZnJvbSAnLi9jb2Rlcy1jOTI0YzNkYi5tanMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGdldEVycm9yU2hhcGUob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCAsIGVycm9yICwgY29uZmlnICB9ID0gb3B0cztcbiAgICBjb25zdCB7IGNvZGUgIH0gPSBvcHRzLmVycm9yO1xuICAgIGNvbnN0IHNoYXBlID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBUUlBDX0VSUk9SX0NPREVTX0JZX0tFWVtjb2RlXSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIGh0dHBTdGF0dXM6IGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoY29uZmlnLmlzRGV2ICYmIHR5cGVvZiBvcHRzLmVycm9yLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnN0YWNrID0gb3B0cy5lcnJvci5zdGFjaztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaGFwZS5kYXRhLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmVycm9yRm9ybWF0dGVyKHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgc2hhcGVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiBpdGVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgZXJyb3I6IGNvbmZpZy50cmFuc2Zvcm1lci5vdXRwdXQuc2VyaWFsaXplKGl0ZW0uZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgnZGF0YScgaW4gaXRlbS5yZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBkYXRhOiBjb25maWcudHJhbnNmb3JtZXIub3V0cHV0LnNlcmlhbGl6ZShpdGVtLnJlc3VsdC5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbi8qKlxuICogVGFrZXMgYSB1bnNlcmlhbGl6ZWQgYFRSUENSZXNwb25zZWAgYW5kIHNlcmlhbGl6ZXMgaXQgd2l0aCB0aGUgcm91dGVyJ3MgdHJhbnNmb3JtZXJzXG4gKiovIGZ1bmN0aW9uIHRyYW5zZm9ybVRSUENSZXNwb25zZShjb25maWcsIGl0ZW1Pckl0ZW1zKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbU9ySXRlbXMpID8gaXRlbU9ySXRlbXMubWFwKChpdGVtKT0+dHJhbnNmb3JtVFJQQ1Jlc3BvbnNlSXRlbShjb25maWcsIGl0ZW0pKSA6IHRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0oY29uZmlnLCBpdGVtT3JJdGVtcyk7XG59XG5cbmV4cG9ydCB7IGdldEVycm9yU2hhcGUgYXMgZywgdHJhbnNmb3JtVFJQQ1Jlc3BvbnNlIGFzIHQgfTtcbiJdLCJuYW1lcyI6WyJnIiwiZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3IiLCJUIiwiVFJQQ19FUlJPUl9DT0RFU19CWV9LRVkiLCJnZXRFcnJvclNoYXBlIiwib3B0cyIsInBhdGgiLCJlcnJvciIsImNvbmZpZyIsImNvZGUiLCJzaGFwZSIsIm1lc3NhZ2UiLCJkYXRhIiwiaHR0cFN0YXR1cyIsImlzRGV2Iiwic3RhY2siLCJlcnJvckZvcm1hdHRlciIsInRyYW5zZm9ybVRSUENSZXNwb25zZUl0ZW0iLCJpdGVtIiwidHJhbnNmb3JtZXIiLCJvdXRwdXQiLCJzZXJpYWxpemUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm1UUlBDUmVzcG9uc2UiLCJpdGVtT3JJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs\n");

/***/ })

};
;